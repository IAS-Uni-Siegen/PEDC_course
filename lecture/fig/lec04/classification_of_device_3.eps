%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: classification_of_device.pdf
%%Creator: Adobe Acrobat 25.1.0
%%For: Bikash Sah
%%CreationDate: 29.04.2025, 14:25:35
%%BoundingBox: 0 0 589 410
%%HiResBoundingBox: 0 0 588.0519 409.1410
%%CropBox: 0 0 588.0519 409.1410
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1094 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® für Microsoft 365"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® für Microsoft 365"
   xmp:CreateDate="2025-04-29T14:23:29+02:00"
   xmp:ModifyDate="2025-04-29T14:25:10+02:00"
   xmp:MetadataDate="2025-04-29T14:25:10+02:00"
   xmpMM:DocumentID="uuid:E801E645-70BF-4955-97A1-6BF140C6B44E"
   xmpMM:InstanceID="uuid:492a6322-5ca7-44ab-888d-de6bad9ede86">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Sah, Bikash, Dr.</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -409.141 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05175e-05 0 mo
3.05175e-05 409.141 li
588.052 409.141 li
588.052 0 li
cp
clp
gsave
-.984879 409.498 mo
589.015 409.498 li
589.015 -.502041 li
-.984879 -.502041 li
-.984879 409.498 li
clp
-209.985 475.498 mo
750.015 475.498 li
750.015 -64.5021 li
-209.985 -64.5021 li
-209.985 475.498 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .999999 1 rgb
ef
587.605 409.498 mo
587.465 409.498 li
587.465 -.502041 li
587.605 -.502041 li
587.605 409.498 li
1.40515 409.498 mo
1.26505 409.498 li
1.26505 -.502041 li
1.40515 -.502041 li
1.40515 409.498 li
1 1 1 rgb
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
265.135 80.158 mo
265.135 150.908 li
248.985 150.908 li
/1 
[/DeviceRGB] /CSA add_res
.0549 .294 .4 rgb
@
389.705 298.538 mo
389.705 369.278 li
412.775 369.278 li
.0706 .337 .459 rgb
@
265.135 80.158 mo
265.135 205.498 li
451.215 205.498 li
451.215 221.648 li
.0549 .294 .4 rgb
@
203.615 298.538 mo
203.615 369.278 li
226.685 369.278 li
.0706 .337 .459 rgb
@
265.135 80.158 mo
265.135 221.648 li
.0549 .294 .4 rgb
@
17.5351 298.538 mo
17.5351 369.278 li
40.6051 369.278 li
.0706 .337 .459 rgb
@
265.135 80.158 mo
265.135 205.498 li
79.0551 205.498 li
79.0551 221.648 li
.0549 .294 .4 rgb
@
143.385 80.158 mo
386.885 80.158 li
386.885 3.26398 li
143.385 3.26398 li
cp
.912916 .915082 .92074 rgb
ef
143.385 80.158 mo
386.885 80.158 li
386.885 3.26398 li
143.385 3.26398 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: HCAAAA+Cambria-Bold Initial
ct_T42Dict begin
-1.109 -0.297 1.371 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /HCAAAA+Cambria-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3256bfd828000000cc000000606376
74205a3e55d00000012c0000024e6670676dde1e55760000037c00000c54
676c796679f2f49100006d4400002b0c68656164f156638100000fd00000
00366868656109b70b690000100800000024686d7478d3b20cfa0000102c
000025246c6f6361c34cb7200000355000001c026d61787012510d000000
5154000000206e616d65a6ff58cb00005174000015b170726570c53c0541
000067280000061c67646972000000000000000000000000000304cc02bc
00050008059a05330000009c059a0533000001f7006601fe020f02040803
050406030204e00006ff4000045f00000000000000004d53202000200000
207f0639fe390161079a01c72000019f0000000003e00555000000200003
058a000e000005550010002b055500100000043200100000000000000000
03e0001000000000fff0ff9d0000fff000000000fff00000fe52fff00000
00000000000000000000000000000000067d0010033dfff002e00010ffa0
fff000110000000000000000000000000000000000000000000000000000
00000000000000000000080000000800000004000000007d00de00c80000
000000940080006800000098008b003d0060007100000000000000000000
00000000000000000000000000000000000000f500000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000013e0136012d012400a30089013001210118008c
00000000013e0132012800ae0000000000000000007e007500d0009e009c
009100730068010000f200e0008200000062006e00000000000000000071
0000004200420000005a00080000000000000000010e012e00f400000252
00000000000000000000000000000000000000d400cc0000011200f400d0
005e0078004e0096007e00dc00e20000006000ea00e00000000000000000
0000012c00000000012c0000008a009c00a00000008d000000b600000000
006200a0008600a0000000b00064005a000000aa0072004a000000000000
000000000000000006be0008027400100381fff000e000d6000000750055
003e0000000000000000013a012a011e00a8009400e400d40096020400dc
01fa00c000b600f0010e00d400b6008200e001de005a0306007e009600f0
007600d000dcfed8feddfff00449060105a7074b0000405a65645f5e5d5c
5b5a59585554524d4c4b4a4948474644434241403f3e3d3c3b3a39383736
3534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918
17161514131211100f0e0d0c0b0a090807060504030201002c0118b01843
58456ab0194360b00c2344231020b00c4ef04d2fb000121b21231120332f
592d2c0118b0184358b0052bb000134bb0145058b100403859b0062b1b21
231120332f592d2c0118b01843584eb0032510f221b000124d1b2045b004
25b00425234a6164b0285258212310d61bb0032510f221b0001259592d2c
b01a435821211bb00225b0022549b00325b003254a612064b01050582121
211bb00325b0032549b0005058b0005058b8ffe238211bb0003821591bb0
005258b01e38211bb0003821595959592d2c0118b0184358b0052bb00013
4bb0145058b90000ffc03859b0062b1b21231120332f592d2c4e018a10b1
0c194344b00014b1000ce2b00015b90000fff03800b0003cb0282bb00225
10b0003c2d2c0118b0002fb00114f2b00113b001154db000122d2c0118b0
184358b0052bb00013b90000ffe038b0062b1b21231120332f592d2c0118
b018435845646a23456469b01943646060b00c2344231020b00cf02fb000
121b2121208a208a525811331b212159592d2c014bb0c85158b10b0a4323
43650a592d2c004bb0c8515800b10a0b4323430b592d2c00b00c2370b101
0c3e01b00c2370b1020c453ab10200080d2d2cb0122bb0022545b0022545
6ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8ffc0
8c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b212121
2d2c014bb0c85158b00643b00743650a592d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2cb1000325456854b0
1c4b505a58b0032545b0032545606820b004252344b0042523441bb00325
204568208a2344b00325456860b003252344592d2cb00325204568208a23
44b003254564686560b00425b0016023442d2cb00943588721c01bb01243
588745b0112bb00d2344b00d7ae41b038a45186920b00d23448a8a8720b0
a05158b0112bb00d2344b00d7ae41b21b00d7ae4595959182d2c208a4523
456860442d2c456a422d2c01182f2d2c0118b0184358b00425b004254964
23456469b0408b6120b080626ab00225b00225618cb0194360b00c234421
8a10b00cf6211b21212121592d2c01b0184358b0022545b002254564606a
b00325456a6120b00425456a208a8b65b0042523448cb00325234421211b
20456a4420456a44592d2c012045b00055b018435a584568234569b0408b
6120b080626a208a236120b003258b65b0042523448cb00325234421211b
2121b0192b592d2c018a8a45642345646164422d2cb00425b00425b0192b
b0184358b00425b00425b00325b01b2b01b0022543b04054b0022543b000
545a58b003252045b040614459b0022543b00054b0022543b040545a58b0
04252045b04060445959212121212d2cb0032520b0072587052e23208ab0
0425b00725b0142b1021c4212d2cc02d2c4b525845441b2121592d2cb002
43583ded181bed592d2c4b505845441b2121592d2c01184b52588a2fed1b
212121592d2c4b53234b515a58b003254568b003254568b0032560545821
21211bb00225456860b0032523442121591b212121592d2cb00243583dcd
181bcd592d2cb002435c58462346608a8a462320468a608a61b8ff806223
2010238ab10c0c8a70456020b0005058b00161b8ffba8b1bb0468c59b010
6068013a1b2121212121592d2c2045b0032546524bb013515b58b0022546
206861b00325b003253f2321381b2111592d2c2045b00325465058b00225
46206861b00325b003253f2321381b2111592d2c004bb0c8515800b00743
b006430b592d2c8a10ec2d2cb00c4358211b2046b0005258b8fff0381bb0
103859592d2c20b0005558b8100063b003254564b00325456461b0005358
b0021bb04061b00359254569535845441b2121591b21b0022545b0022545
6164b028515845441b212159592d2c21210c6423648bb84000622d2c21b0
8051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c
6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2c184b5358b00425b00425496423456469b0408b6120b080626ab0
0225b00225618cb00c2344218a10b00cf6211b218a11231220392f592d2c
b00225b002254964b0c05458b8fff838b008381b2121592d2cb013435803
1b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb00225
b8fff038b0282b8a102320d023b0102bb0054358c01b3c59201011b00012
012d2cb0482b2d2c01b0022510d023c901b00113b0001410b0013cb00116
2d2c01b00013b001b0032549b0031738b001132d2c4b53234b515a582045
8a60441b2121592d2c184b5358b00425b004254964b00325b00325496468
b0408b6120b080626ab00225b00225618cb00c234421b004251023b00cf6
1bb00425b0042511122320392f59cc21212d2c0118b0184358b005254623
4564611b21b00425b004254a59b00e23442310b00eec2310b00eec2d2cb0
1b435820b0016045b000515820b0016020452068b0005558b0206044211b
212121591b20b0016020452068b0005558b8ffe06044b01c4b50582045b0
2060441b21591b21212159591b21592d2cb0022546206861b00325b00325
3f2321382d2c462346608a8a462320468a608a61b8ff8062232010238ab1
0c0c8a70456020b0005058b00161b8ff808b1bb0818c59683a2d2cb0402a
212d2c2035b001602d2cb0024354584b53234b515a58381b2121591b2121
2121592d2c49b00e23442d2cb0024354584b53234b515a5820458a60441b
2121591b21212121592d2c8a10b002435821b0301ac9181bb0401a18ed59
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002
435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb0
02435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c
4b52587d1b7a592d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b9400002
0063b80400885458b202400243604259595959592d2c451868234b515823
20452064b04050587c59688a6059442d2cb00016b00225b0022501b00123
3e00b002233eb10102060cb00a236542b00b234201b001233f00b002233f
b10102060cb006236542b0072342b00116012d2c20b82000628a6023622d
2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed59
21b006255cb006255a58b0092b5920b005254ab0042547b004254760b006
2547b0806361b00225b0005558b00325b00725496359b0082558001b0159
b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b003
2520b0005558631b2159612320b0005558b080631b21b08059b0592bb006
255c586959b00425202010b00048233ab0062658001b0159b0052658b003
252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358b0
0625b00a251bb00925b0072559b00225b00225070cb005256323b0062563
6020b94000040063535821b00426b00426b00a1bb94000040063655158b0
042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092e
b00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b0
052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed
59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b25
c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d25
4961b08062b00525b005250bb00a252338b00625b0062587b00825b00825
0bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa7
23792121212121212121212121212d2c23b0005458b9400000001bb90000
4000598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458
b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b94000
00001bb90000400059b05b2b2d2cb00426b00426080db00426b00426080d
b05b2b2d2c204569442d2c0020b200400325b0062649618b3812342d0001
00000006fae1fcb82f4b5f0f3cf5000b080000000000b9e6983d00000000
d62f8569f71ffd9c0afb086000010009000200000000000000010000079a
fe3900000b0af71ffd930afb000100000000000000000000000000000492
054400be0000000001c3000001c300000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000006c5005d000000000000000004e9006000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000003c0005b04c70060
043f005b000000000000000004c6003a0284004900000000000000000000
0000071f004904d40049048e005b000000000000000003b1004903ac0051
02ec002504c70040000000000663001b0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000284004900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000409005b0505005804290058000000000000000005370058
02a200580000000000000000000000000600005504db005504dd005b048d
00580000000004bd005803d60059048a003904bb003d0000000006c3001b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000002a20058
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000002d30054038b0057032c00540000000000000000038a003d01f6
0047000000000000000000000000052e0047039400470363005400000000
0000000002c9004702c5004d023f002e038b00410000000004b900270000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000247009a0247
009a0000fe360000fe350000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002ae00b3000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000361007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000004b0004200000000000000000391004400000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
006f006f006f006f006f006f006f006f006f006f006f006f006f006f006f
006f011c011c011c01a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a2020a02ab
03400340034003d90461046104610461054405e0063c063c063c06d70784
07fb08840884090409040904090409040904090409040904090409040904
090409040904090409040904090409040904090409040904090409040904
090409040904090409040904090409040904090409040904090409040904
090409040904090409400940094009400940094009400940094009400940
094009400940094009400940094009400940094009400940094009400940
094009400940094009400940094009400940094009400940094009400940
094009400940094009400940094009400940094009400940094009400940
094009400940094009400940094009400940098c09e80a6b0a6b0a6b0aea
0b2a0b2a0b2a0b2a0bb20c1f0c660ccc0ccc0d5d0dd00e290e8b0e8b0ef2
0ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef2
0ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef2
0ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20ef20f08
0f080f080f080f080f080f080f080f080f080f080f080f080f080f080f08
0f080f080f080f080f080f080f080f080f080f080f080f080f080f080f08
0f080f080f080f080f080f080f080f080f080f080f080f080f080f080f08
0f080f080f080f080f080f080f080f080f080f080f080f080f080f080f08
0f080f550fc1101e101e101e108d10d310d310d310d3117511e712291229
1229128712f7134713a713a7140b140b140b140b140b140b140b140b140b
140b140b140b140b140b140b140b140b140b140b140b140b140b140b140b
140b140b140b140b140b140b140b140b140b140b140b140b140b140b140b
140b140b140b140b140b140b140b140b140b140b140b140b140b140b140b
140b140b140b140b140b140b142d1445144e145714571457145714571457
14571457145714571457145714571457147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b147b147b147b
147b147b147b147b147b147b147b147b147b147b147b147b149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e149e149e149e149e149e
149e149e149e149e149e149e149e149e149e149e15231523152315861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615861586
158615861586158615861586158615861586158615861586158615860000
000100000e00005a00040020000200020010002f0066000003d20c540002
00010000002f023a000000000000000d03880000000000000000000e006c
03880000000300000000006403f40000000300000001000e045800000003
0000000200080b880000000300000003002e0b6200000003000000040018
0b78000000030000000500180b90000000030000000600180ba800000003
0000000700760bc00000000300000008002a040200000003000000090046
0c36000000030000000a070a0458000000030000000b00560c7c00000003
0000000c00280cd2000000030000000d03880000000000030000000e006c
0388000100000000000000320cfa000100000000000100070d2c00010000
00000002000410c40001000000000003001710b10001000000000004000c
10bc0001000000000005000c10c80001000000000006000c10d400010000
00000007003b10e0000100000000000800150d0100010000000000090023
111b000100000000000a03850d2c000100000000000b002b113e00010000
0000000c00141169000100000000000d01c4117d000100000000000e0036
13410003000104090000006403f40003000104090001000e045800030001
0409000200080b880003000104090003002e0b6200030001040900040018
0b78000300010409000500180b90000300010409000600180ba800030001
0409000700760bc00003000104090008002a040200030001040900090046
0c36000300010409000a070a0458000300010409000b00560c7c00030001
0409000c00280cd2000300010409000d03880000000300010409000e006c
0388004d006900630072006f0073006f0066007400200073007500700070
006c00690065006400200066006f006e0074002e00200059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f0020006300720065006100740065002c00200064
006900730070006c00610079002c00200061006e00640020007000720069
006e007400200063006f006e00740065006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
0020006c006900630065006e007300650020007400650072006d00730020
006f00720020007400650072006d00730020006f00660020007500730065
002c0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000700072006f0064007500630074002c002000730065
00720076006900630065002c0020006f007200200063006f006e00740065
006e007400200069006e0020007700680069006300680020007400680069
007300200066006f006e0074002000770061007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e00200041006e00790020006f00740068006500720020
007500730065002000690073002000700072006f00680069006200690074
00650064002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f0066006f006e00740073002f
00640065006600610075006c0074002e006100730070007800a900200032
0030003100370020004d006900630072006f0073006f0066007400200043
006f00720070006f0072006100740069006f006e002e00200041006c006c
002000720069006700680074007300200072006500730065007200760065
0064002e00430061006d0062007200690061002000680061007300200062
00650065006e002000640065007300690067006e0065006400200066006f
00720020006f006e002d00730063007200650065006e0020007200650061
00640069006e006700200061006e006400200074006f0020006c006f006f
006b00200067006f006f00640020007700680065006e0020007000720069
006e00740065006400200061007400200073006d0061006c006c00200073
0069007a00650073002e0020004900740020006800610073002000760065
007200790020006500760065006e002000730070006100630069006e0067
00200061006e0064002000700072006f0070006f007200740069006f006e
0073002e00200044006900610067006f006e0061006c00200061006e0064
00200076006500720074006900630061006c00200068006100690072006c
0069006e0065007300200061006e00640020007300650072006900660073
0020006100720065002000720065006c00610074006900760065006c0079
0020007300740072006f006e0067002c0020007700680069006c00650020
0068006f00720069007a006f006e00740061006c00200073006500720069
00660073002000610072006500200073006d0061006c006c00200061006e
006400200069006e00740065006e006400200074006f00200065006d0070
0068006100730069007a00650020007300740072006f006b006500200065
006e00640069006e00670073002000720061007400680065007200200074
00680061006e0020007300740061006e00640020006f0075007400200074
00680065006d00730065006c007600650073002e00200054006800690073
0020007000720069006e006300690070006c00650020006900730020006d
006f007300740020006e006f007400690063006500610062006c00650020
0069006e00200074006800650020006900740061006c0069006300730020
0077006800650072006500200074006800650020006c006f007700650072
006300610073006500200063006800610072006100630074006500720073
00200061007200650020007300750062006400750065006400200069006e
0020007300740079006c006500200074006f002000620065002000610074
002000740068006500690072002000620065007300740020006100730020
0065006c0065006d0065006e007400730020006f006600200077006f0072
0064002d0069006d0061006700650073002e0020005700680065006e0020
00430061006d006200720069006100200069007300200075007300650064
00200066006f0072002000630061007000740069006f006e007300200061
0074002000730069007a006500730020006f007600650072002000320030
00200070006f0069006e0074002c0020007400680065002000200069006e
007400650072002d00630068006100720061006300740065007200200073
0070006100630069006e0067002000730068006f0075006c006400200062
006500200073006c0069006700680074006c007900200072006500640075
00630065006400200066006f007200200062006500730074002000720065
00730075006c00740073002e002000540068006500200064006500730069
0067006e002000690073006e002700740020006a00750073007400200069
006e00740065006e00640065006400200066006f00720020006200750073
0069006e00650073007300200064006f00630075006d0065006e00740073
003a002000540068006500200072006500670075006c0061007200200077
0065006900670068007400200068006100730020006200650065006e0020
0065007800740065006e0064006500640020007700690074006800200061
0020006c006100720067006500200073006500740020006f00660020006d
00610074006800200061006e006400200073006300690065006e00630065
002000730079006d0062006f006c0073002e002000540068006500200047
007200650065006b00200061006e006400200043007900720069006c006c
0069006300200068006100730020006200650065006e0020006400650073
00690067006e0065006400200075006e00640065007200200063006c006f
007300650020007300750070006500720076006900730069006f006e0020
006f006600200061006e00200069006e007400650072006e006100740069
006f006e0061006c0020007400650061006d0020006f0066002000650078
00700065007200740073002c002000770068006f002000610069006d0065
006400200074006f00200073006500740020006100200068006900730074
006f0072006900630061006c0020006e006500770020007300740061006e
006400610072006400200069006e0020006d0075006c00740069002d0073
006300720069007000740020007400790070006500200064006500730069
0067006e002e004d006900630072006f0073006f00660074003a00200043
0061006d006200720069006100200042006f006c00640056006500720073
0069006f006e00200036002e0039003800430061006d0062007200690061
002d0042006f006c006400430061006d0062007200690061002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004d006f006e006f007400790070006500200049006d
006100670069006e006700200061006e00640020005400690072006f0020
00540079007000650077006f0072006b00730068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
006300740066006f006e007400730068007400740070003a002f002f0077
00770077002e0066006f006e00740073002e0063006f006da92032303137
204d6963726f736f667420436f72706f726174696f6e2e20416c6c207269
676874732072657365727665642e43616d6272696120686173206265656e
2064657369676e656420666f72206f6e2d73637265656e2072656164696e
6720616e6420746f206c6f6f6b20676f6f64207768656e207072696e7465
6420617420736d616c6c2073697a65732e20497420686173207665727920
6576656e2073706163696e6720616e642070726f706f7274696f6e732e20
446961676f6e616c20616e6420766572746963616c20686169726c696e65
7320616e6420736572696673206172652072656c61746976656c79207374
726f6e672c207768696c6520686f72697a6f6e74616c2073657269667320
61726520736d616c6c20616e6420696e74656e6420746f20656d70686173
697a65207374726f6b6520656e64696e677320726174686572207468616e
207374616e64206f7574207468656d73656c7665732e2054686973207072
696e6369706c65206973206d6f7374206e6f7469636561626c6520696e20
746865206974616c69637320776865726520746865206c6f776572636173
65206368617261637465727320617265207375626475656420696e207374
796c6520746f206265206174207468656972206265737420617320656c65
6d656e7473206f6620776f72642d696d616765732e205768656e2043616d
62726961206973207573656420666f722063617074696f6e732061742073
697a6573206f76657220323020706f696e742c207468652020696e746572
2d6368617261637465722073706163696e672073686f756c642062652073
6c696768746c79207265647563656420666f72206265737420726573756c
74732e205468652064657369676e2069736e2774206a75737420696e7465
6e64656420666f7220627573696e65737320646f63756d656e74733a2054
686520726567756c61722077656967687420686173206265656e20657874
656e64656420776974682061206c6172676520736574206f66206d617468
20616e6420736369656e63652073796d626f6c732e205468652047726565
6b20616e6420437972696c6c696320686173206265656e2064657369676e
656420756e64657220636c6f7365207375706572766973696f6e206f6620
616e20696e7465726e6174696f6e616c207465616d206f66206578706572
74732c2077686f2061696d656420746f20736574206120686973746f7269
63616c206e6577207374616e6461726420696e206d756c74692d73637269
707420747970652064657369676e2e4d6963726f736f66743a2043616d62
72696120426f6c6456657273696f6e20362e393843616d627269612d426f
6c6443616d6272696120697320612074726164656d61726b206f66207468
65204d6963726f736f66742067726f7570206f6620636f6d70616e696573
2e4d6f6e6f7479706520496d6167696e6720616e64205469726f20547970
65776f726b73687474703a2f2f7777772e6d6963726f736f66742e636f6d
2f7479706f6772617068792f6374666f6e7473687474703a2f2f7777772e
666f6e74732e636f6d4d6963726f736f667420737570706c69656420666f
6e742e20596f75206d617920757365207468697320666f6e7420746f2063
72656174652c20646973706c61792c20616e64207072696e7420636f6e74
656e74206173207065726d697474656420627920746865206c6963656e73
65207465726d73206f72207465726d73206f66207573652c206f66207468
65204d6963726f736f66742070726f647563742c20736572766963652c20
6f7220636f6e74656e7420696e207768696368207468697320666f6e7420
77617320696e636c756465642e20596f75206d6179206f6e6c7920286929
20656d626564207468697320666f6e7420696e20636f6e74656e74206173
207065726d69747465642062792074686520656d62656464696e67207265
737472696374696f6e7320696e636c7564656420696e207468697320666f
6e743b20616e6420286969292074656d706f726172696c7920646f776e6c
6f6164207468697320666f6e7420746f2061207072696e746572206f7220
6f74686572206f75747075742064657669636520746f2068656c70207072
696e7420636f6e74656e742e20416e79206f746865722075736520697320
70726f686962697465642e687474703a2f2f7777772e6d6963726f736f66
742e636f6d2f7479706f6772617068792f666f6e74732f64656661756c74
2e61737078000000b90020011eb40918014a20b8011db40918014a20b801
1cb40918014a20b80117b40918014a20b80116b40918014a20b80112b409
18014a20b80111b40918014a20b8010fb40918014a20b8010db40918014a
20b8010ab40918014a20b80109b40918014a20b80108b40918014a20b801
06b40918014a20b80105b40918014a20b8010440e90918014a20fb091801
4a20fa0918014a20ea0918014a20e40918014a20e30918014a20e1091801
4a20de0918014a20d80918014a20d30918014a20cd0918014a20cc091801
4a20c90918014a20c80918014a20c60918014a20c40918014a20c2091801
4a20c00918014a20bd0918014a20b10918014a20af0918014a208c091801
4a208b0918014a208a0918014a20890918014a20860918014a2085091801
4a20840918014a20830918014a20820918014a20810918014a2080091801
4a207f0918014a207e0918014a207d0918014a20510918014a2050091801
4a20490918014a20480918014a2f412f0126003f0126004f0126005f0126
006f0126007f0126008f0126009f012600af012600bf012600cf0126000b
001f0124002f0124003f0124004f0124005f0124006f0124007f0124008f
0124009f012400af012400bf0124000b00200123407801dfe016171cd4d5
16171c7b7c161b7b7c19d1d216171c767716171c6d7016171c6c6f16171c
6b6e161b6b6e7f721a747514151c676a14151c666914151c6568141b6568
85711a1973167a4319217943192107c717c702e7e8012b74b30117be0127
d660be70be80be04999a022b409a015f93019192022bb8fff04010eb1b1d
3909631863c7630320630d0f39b8fff0402c471f253910aa657e399e9823
1f1897262a399798012b4898019695022b10953f4039d995010bb01bb084
b003410d010701050000002b010601050000002b010401050000002b0105
40498a002b8b8a002b898a002b8a85062b817f012b7d7e052b7e84221f88
85012b8785012b8485052b8385052b1b37151836151535151234150f3315
0c3215093115063015032f15002e15b801204080433e2126270e28270f0f
2a0128f8ff2bf8f90ff6f70ef4f50e30f630f802f0f8012a2b0e2c2b0f22
230e24230f1e1f0e201f0f0f10110c090a0b0c0607080c0304050c000102
0c0603641f0b0f4b0f020b003b004403660974038709ab00a609db0f090b
000b030b0f3b003b0959035b097603740f9b009b09990fb909da000eb901
21012240120f1b011d0d18071a0d1510170d1204140d1f410e0121000100
00012100100121002f0121003f0121009f012100bf01214026062c3c2a3c
283c263c243c223c203c1e3c1b3c183c153c123c0f3c093c063c033c003c
50335401b0124b004b5442b013014b004b5342b0332b4bb8032052b0322b
4bb009505b58b101018e59b0332bb00288b8010054b00488b8020054b012
435a5b58b80119b101018e851bb900010100b04b60858d592b2b1db0644b
5358b0801d59b0324b5358b0901d59004bb03251b01b23422b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b73742b2b2b2b2b7374752b2b2b2b2b2b2b2b2b
2b2b2b73b0f445b0f8456961b0f82344b0f64569b0f84560b0f62344732b
2b2b2b73b02a45b02c4561b0284560b02623442b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b7300742b2b742b2b2b2b2b2b74
2b2b73732b7374732b742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2bb109322b4bb0505242b002435c4bb064524bb01b505b60b01a
23424bb0c8524bb036505bb00c2342737373b100024354b102024354b106
0243545b5b58411d011e0064011d0064011c006401170064011600640112
006401110064010f0064010d0064010a0064010900640108006401060064
010500640104404d64fb64fa64ea64e464e364e164de64d864d364cd64cc
64c964c864c664c464c264c064bd64b164af648c648b648a648964866485
64846483648264816480647f647e647d6451645064496448642b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b00>
[11021 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 568 19 <000200600000049e0555001e002a008fb1010243555840271c2003209240
1c1c1407142a032a9214401413a644140305080708a64407187e24242c1f
007e0d01182fe13212392fe1002f2b110033183f2b001a1810ed2b111200
39182f1aed2b31301b401e1c20032092401c1c1407142a032a9214401413
a644140305080708a6440700182f2b110033183f2b001a1810ed2b111200
39182f1aed2b31305925141e02171521353e033511342e02273521321615
14060623222735333236363534262623220702010a172b2dfde6252b1506
05152b260245fdfc76e0a8613e56647639396e564626fa42372116084242
0a17293f30035e2f4028190a42b5bc85c4650471397c69687b340200>HCAAAA+Cambria-Bold AddT42Char 
1 836 133 <0001005bfff0039d03f0001e0072b10102435558401e100b800b13031398
400b100004041c031c95041610400f0001012018830701182fe112392f33
d61acd003fed2b001810c43f1aed2b001a1810cc31301b4015100b800b13
031398400b100004041c031c9540041600183f1aed2b001810c43f1aed2b
001a1810cc3130590117060623222635343636333216171523262623220e
021514161633323603504d62b76cd9e47dea9751a142c60f3c382543331e
2c62503a6701005d6053fff3a4ef7b1714f15e56255b997575a15732>HCAAAA+Cambria-Bold AddT42Char 
1 1044 134 <00020060fff0048a05980020002f00b3b1010243555840351e1da7441e00
2001142403249840141006080308aa060605a7440606090a2f032b0d2b03
2b95400d160809170300842f2f3128831001182fe112392fe11733003f1a
ed2b11001733182f2f2b001810e52b00183f1aed2b00183f3f2b31301b40
291e1da7441e002001142403249840141006080308aa060605a744060609
0a2f032b0d2b032b95400d1600183f1aed2b11001733182f2f2b001810e5
2b00183f1aed2b00183f3f2b31305901141e021715052337270606232226
353436363332161735342e02273525330134262322060615141633323636
35041c0512282ffef079090f489f49b6b56ed9992c553a0613263201157d
fedf52553e592d565b2b553a01244c462a1b0a43099001494ffafbaae978
0b105b6b592f1a0a430efd007a7659a873c5c22b593a>HCAAAA+Cambria-Bold AddT42Char 
1 1366 135 <0002005bfff003f903f00019002000bfb10102435558403a201303209840
7013010f131f134f135f1304160313130a030a1d031d98400a100019010b
0319030316031695400316190012841a1a222013840601182fe13212392f
f1c632003f1aed2b001810c45f5e5d3f1aed2b11120039182f5f5e5d5d1a
ed2b31301b402f2013032098407013010f131f134f135f1304160313130a
030a1d031d98400a100019010b031903031603169540031600183f1aed2b
001810c45f5e5d3f1aed2b11120039182f5f5e5d5d1aed2b313059250606
232226353436363332161617161716172116163332363703262623220607
03df66c882e9eb79de935b89622026131401fd86017f824c7a47bd044850
4d5b09b66c5afffba2eb792a4b353f515376b5ab3948014b99969c93>HCAAAA+Cambria-Bold AddT42Char 
1 1664 138 <0001003a000004870598003b008ab10102435558402827110e032a292aa7
441029153b1e1b031b031b954003103837a74438003a01088415153d3b20
843001182fe13212392fe1003f3f2b00183f1aed2b11003333183f332b11
00173331301b401d27110e032a292aa7441029153b1e1b031b031b954003
103837a744380000183f2b00183f1aed2b11003333183f332b1100173331
3059013636333216161511141e03171521353e023511342e022322060615
11141e04171521353e043511342e03273525331101d05b8f4b6e7837030c
15261bfe1b2f230d0d1f312826533703060b12221cfe161e22130e04030a
14262a01157d035c5143519879fe932c4d2e1d140742420b2a4a5f010564
6f3d1e2f512efe7c383d211a1612074242071319274540030c5651372114
08420efdc500>HCAAAA+Cambria-Bold AddT42Char 
1 1970 139 <000200490000023d056f0003001b00b4b101024355584039030203036340
0f024f0202ff02010f02bf02df02ff020409000210020210030211aa0f0f
0ea7440f0f19041b04a7441b011202128408081d1c11120139182fe1c410
c4002f2b110033183f2b001810e52f5f5e5d5e5d71721aed2b31301b4030
0302030363400f024f0202ff02010f02bf02df02ff020409000210020210
030211aa0f0f0ea7440f0f19041b04a7441b00182f2b110033183f2b0018
10e52f5f5e5d5e5d71721aed2b31305901152135033e023511342e022735
253311141e0417152101d1feee6a31250d09192b2201137d03060b12221c
fe18056ff5f5fad30d2a485f01d1313c2413074408fd39383d211a161207
4200>HCAAAA+Cambria-Bold AddT42Char 
1 2242 143 <00010049000006e003f0005900d2b10102435558404008240b2403249540
0b100001440340044003409540041059aa575756a744570f171a31344905
4c33194b4b4ca7444b11841e082c84381e38381e5b590045845001182fe1
32321239392f2f10e13210e1002f2b11003333111733183f2b001810e53f
1aed2b11001733183f1aed2b11003331301b402f08240b24032495400b10
0001440340044003409540041059aa575756a744570f171a313449054c33
194b4b4ca7444b00182f2b11003333111733183f2b001810e53f1aed2b11
001733183f1aed2b110033313059011736363332161617363633321e0215
11141e03171521353e023511342e0223220e041511141e02171521353e02
3511342e04232206061511141616171521353e023511342e022735253301
ca0c5b924c4a6244156595515069441f030c15261bfe1e2d220d0c222f26
1a2c2d20130705102325fe242e230c050c151b251c2551370b242dfe2130
250d0513273001127e035803554626493b5e4c2a58845cfe932c4d2e1d14
0742420b2a4a5f010c5a71401c1021222a343bfeba44482c1d0a42420b2a
4960010c425b382a1a0e2e522ffe7d5e4b2b0b42420d2a485f019b4a472b
1b0a4408>HCAAAA+Cambria-Bold AddT42Char 
1 2696 144 <000100490000049503f000390095b10102435558402b170239031a191aa7
4401191527aa252524a744250f28110e2d0e030e95402d10338406063b1e
282713841e01182fe111331112392fe1003f1aed2b11003333183f2b0018
10e53f332b1100173331301b4020170239031a191aa74401191527aa2525
24a744250f28110e2d0e030e95402d1000183f1aed2b11003333183f2b00
1810e53f332b110017333130592121353e023511342e0423220606151114
1616171521353e023511342e022735253307173e0233321e021511141e03
170495fe1b2e240d060d171c241c2652380c252ffe1d30250d0513273001
127e0f0c3e5e6739526c431d030c15261b420b2b495f010b475b3a27190c
2f532ffe7f5f4a2b0b42420d2a485f019b4a472b1b0a44089003373f252f
5a8256fe922c4d2e1d140700>HCAAAA+Cambria-Bold AddT42Char 
1 3008 145 <0002005bfff0043303f0000f001e0057b101024355584018001303139840
0016091b031b984009100c8318182010830401182fe112392fe1003f1aed
2b00183f1aed2b31301b40100013031398400016091b031b984009100018
3f1aed2b00183f1aed2b3130590522262635343e02333216151406060114
1633323e0235342623220606023b93d5784a84b76bf2f67ae2feb45f6035
472b125f5d4452261067e3af86c4803dfff6aeeb72020fd4d336668f59d7
d556ac00>HCAAAA+Cambria-Bold AddT42Char 
1 3192 148 <000100490000039503f0002600c0b10102435558403811010b0008100802
0903080440020b120b220b031104040b030b9540041026aa242423a74424
0f16191819a744180840070728260012841d01182fe1323212392f1acd00
2f2b110033183f2b001810e53f1aed2b005f5e5d1a1810cd5f5e5d113333
31301b402e11010b00081008020903080440020b120b220b031104040b03
0b9540041026aa242423a744240f16191819a7441800182f2b110033183f
2b001810e53f1aed2b005f5e5d1a1810cd5f5e5d11333331305901173636
3332171123262623220e031511141616171521353e023511342e02273525
3301cb0d499a5a3d43b511372e16352d13060e2a32fe1330250d05132730
01127e035103564c0dfeec3a3e1b31333434fec15f4c2b0942420d2a485f
019b4a472b1b0a440800>HCAAAA+Cambria-Bold AddT42Char 
1 3502 149 <00010051fff0035a03f0002f00d3b10102435558b90023ffe8b70910480a
23231323b8ffe840310910480a232303171340131c031c981310002f010b
032f2c402c030303982c16181717271f850f0f2e278506063100402e0118
2f1acd12392fe112392fe111392fcd003fed2b001a1810cd5f5e5d3fed2b
001a1810cd123911332b113911332b31301bb90023ffe8b70910480a2323
1323b8ffe840210910480a232303171340131c031c981310002f010b032f
2c402c03030398402c1600183f1aed2b001a1810cd5f5e5d3fed2b001a18
10cd123911332b113911332b31305913161633323635342626272e033534
36363332161715232e0223220615141616171e0215140e0223222735d718
68574b4d2351623761482a68c17c498c6f841737422e424e1c48675e763e
3c6c975ba5ca010e5b5b4441293a352b183a495a375a84460c14e940461b
3c362636332b27556f4a51754c252fef>HCAAAA+Cambria-Bold AddT42Char 
1 3848 150 <00010025fff0030204da001c0094b10102435558402c1309a74407130f0f
010c030f134740100f1c400c10481c1c1803180318954003161212001410
140e0814840601182fe1c633113310c4392f003f1aed2b001810c62f2b3f
1aedcd5f5e5d11332b31301b40211309a74407130f0f010c030f13474010
0f1c400c10481c1c18031803189540031600183f1aed2b001810c62f2b3f
1aedcd5f5e5d11332b313059250606232226351123353e03373315211521
111416163332363637030258905095937d3d3a201305ef011dfee3153225
1c2c311b784b3da1a3022f450a28436c51fa7dfe3d716c330a1a1800>HCAAAA+Cambria-Bold AddT42Char 
1 4086 151 <00010040fff0048a03e0002d008bb101024355584027112d1200002da744
000f03082f1caa1a0b1d1e030721070307954021161d1c14840b0b2f0284
2501182fe112392fe13333003f1aed2b11001733182fe51112393f2b1100
33113331301b401d112d1200002da744000f03082f1caa1a0b1d1e030721
0703079540211600183f1aed2b11001733182fe51112393f2b1100331133
313059132111141e02333236363511342e0227352111141e021715052337
270606232226263511342e04274001850c22312625523906112429018605
12282ffef079090c5d924a6a7f3803060b13211c03e0fdd5606c3f1d2e53
2f01824947281b0c42fd444c462a1b0a4309900356444f9979016e383c21
1b161207>HCAAAA+Cambria-Bold AddT42Char 
1 4360 153 <0001001bfff6066203e000250083b10102435558402c0b1c1f0308131d01
050e192307090908a744090f001215030325001514130103021201121503
08191f270e0801182f3310c632111739113333113333113333002f17333f
2b1100173311173331301b40190b1c1f0308131d01050e192307090908a7
44090f001215030300182f17333f2b110017331117333130590503032303
2e022735211506061514161713133313133636353426273521150e030701
03e9bcdbcaf3161e262001e92f2f100a7de6bac283140f302c01791e211d
2523fef30a0285fd7b02f9463f23074242082925193d22fe6102affd5101
69364a1c2a3707424309182a5059fd4d>HCAAAA+Cambria-Bold AddT42Char 

1 0 3 <> HCAAAA+Cambria-Bold AddT42Char 
1 0 0 <000400be0000048605540028002c00300034003e401d270000292c1d0b32
2d2c0b2d2d0b2c03362f34130e182f34002c2a2d32002fddd6ddc62fddd6
ddc6012fcd1217392f2f2f10cd10cd10cd332fcd30310135343e02373e03
35342623220e02072335363633321e0215140e02070e0315151715233501
11211101112111023706162a2417261b0f413e2030241909603c89434663
3e1c0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f
3339234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1
fee4049afb6604f7faac0554>HCAAAA+Cambria-Bold AddT42Char 
HCAAAA+Cambria-Bold /CharStrings get begin
/P 19 def
/c 133 def
/d 134 def
/e 135 def
/h 138 def
/i 139 def
/m 143 def
/n 144 def
/o 145 def
/r 148 def
/s 149 def
/t 150 def
/u 151 def
/w 153 def
/space 3 def
end
HCAAAA+Cambria-Bold /Encoding get
dup 80 /P put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 127 /space put
pop
end
%ADOEndSubsetFont
/IOEGRZ+Cambria-Bold /HCAAAA+Cambria-Bold findfont ct_VMDictPut
/IOEGRZ+Cambria-Bold*1 
[80{/.notdef}rp /P 18{/.notdef}rp /c /d /e 2{/.notdef}rp /h 
/i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r /s 
/t /u /.notdef /w 7{/.notdef}rp /space 128{/.notdef}rp]
IOEGRZ+Cambria-Bold nf
IOEGRZ+Cambria-Bold*1 [24 0 0 -24 0 0 ]msf
145.115 36.468 mo
(Power\177)
[14.16 13.2 18.6001 12.7441 11.064 0 ]xsh
220.115 36.468 mo
(semiconductor)
[11.016 12.7441 21.36 7.53589 11.1839 13.656 14.4961 14.328 14.328 11.2559 8.37616 13.656 
0 ]xsh
229.355 61.788 mo
(switch)
[10.92 19.1521 7.58389 8.40015 11.2559 0 ]xsh
2.15514 298.538 mo
155.945 298.538 li
155.945 221.644 li
2.15514 221.644 li
cp
.837334 .840193 .847625 rgb
ef
2.15514 298.538 mo
155.945 298.538 li
155.945 221.644 li
2.15514 221.644 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /KCAAAA+Cambria
Type42DictBegin
[<00010000000c000c000c000c4f532f327633d953000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c7966a4dcaa4a0000c08400007c4c68656164fa71cec400001a800000
00366868656112c2172000001ab800000024686d74781f412ee200001adc
0000434c6c6f6361f7bbd47500005e2800003b7e6d617870280211e90000
99a8000000206e616d654a11c399000099c80000159370726570664ecf85
0000af5c0000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00006ff420024ff02000000000000004d53202000400000
208e0639fe390161079a01c72000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006fd71364955105f0f3cf5001b080000000000b9e6
983d00000000d630eedff434ec4a16f118ef000000090002000000000000
00010000079afe390000175af434fda416f1000100000000000000000000
0000000003e8054400be0000000001c3000001c300000000000004e40079
04800077054b0078049a0079044b007904e30077057e0079029800790274
001d05090079000000000686007505720075053a00770000000000000000
04f8007903f8007004be0042052f005a04d4001600000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000003e80050046100300387
00690470006903e70068026c004f03f4003f046a00400239005300000000
00000000022c003f06a8005304770053043f00690000000004600068034f
00530370005e02b50025046b0049040800130632001d0000000004080014
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000239005300000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000045dfffe0471006803ef006904aa006a0417006803d50068044d
006904e3006802610068023b00070476006803b7006805bb006504c40064
048300690000000004830069046a006803a4005e04390039049300470447
001406a4001d000000000416001600000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002610068000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002ef004c0346003802ab005d034e005d02ee005d01eb004b02f70041
0349004101c2004e000000000000000001b9004004db004e0353004e032c
005d000000000346005c0284004e029b0056021c002e034b004703130027
0497002f0000000003130027000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
024700c7000000000000fe850000fe850000000000000000000000000000
0000000000000000000001a4001800000000000000000000000000000000
02a8006c02a8006c024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000030e
00b4030e002b030e00b4030e002b00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ae003103b000330436003c00000000000000000000000000000000
0000000000000000000000000436006f043600810436003c000000000000
0000000000000000000000000000000000000000000003e0002903e3003f
046400480000000000000000000000000000000000000000000000000000
0000046e0081046e0090046e004d00000000000000000000000000000000
00000000000000000000000003420063034200730342003a000000000000
000000000000000000000000000003420066000000000000000002560092
02560032000000000000000003420063034200730342003a000000000000
000000000000000000000000000003420066000000000000000002560092
02560032000000000000000003420063034200730342003a000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000046e007c000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000003420063034200730342003a00000000000000000000
00000000000000000000026c004f000000000395005d0351006403d9005d
035b005d0314005d039b006403f6005d01ef005d01e7002503af005d0000
000004af005d03f2005d03d5006400000000000000000399005d02fa0062
035c002c03d4005303940021000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000>
<000000760076007600760076010e01a2020d02b80363040b04a104e9052f
05df05df06810702075d075d075d080308ba092b099d0a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250a250a250a25
0a250a250a250a250a250a250a250a250a250a250a250a250b260bb00c45
0cdd0d740e0c0f350fd2104310431043108e119c124012a012a0132d13b8
148514fd1585160016b716b7175617561756175617561756175617561756
175617561756175617561756175617561756175617561756175617561756
175617561756175617561756175617561756175617561756175617561756
175617561756175617561797179717971797179717971797179717971797
179717971797179717971797179717971797179717971797179717971797
179717971797179717971797179717971797179717971797179717971797
179717971797179717971797179717971797179717971797179717971797
17971797179717971797179717971797180d189018f7194d19d61a4a1abf
1b321b6f1bad1c441c941d0f1d791dbe1dbe1e321ebe1f341f8a1fea203e
20ad20ad2120212021202120212021202120212021202120212021202120
212021202120212021202120212021202120212021202120212021202120
212021202120212021202120212021202120212021202120212021202120
213621362136213621362136213621362136213621362136213621362136
213621362136213621362136213621362136213621362136213621362136
213621362136213621362136213621362136213621362136213621362136
213621362136213621362136213621362136213621362136213621362136
21bf2234228d230c238523fb24e9255c25a425a425a425dd268d27222776
277627f3285428d2292b299429ea2a512a512ad52ad52ad52ad52ad52ad5
2ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad5
2ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad5
2ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad52ad5
2ad52ad52ad52ad52ad52ad52ad52b0a2b0a2b1e2b3d2b3d2b3d2b3d2b3d
2b3d2b3d2b752b752b752b752b752ba02bba2bf02bf02bf02bf02bf02bf0
2bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf0
2bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02bf02c49
2ca12ca92cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb1
2cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cb12cdb2cdb
2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb
2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb2cdb
2d4b2de02de82de82de82de82de82de82de82de82e582ee92f602f602f60
2f602f602f602f602f602fca304d30b330b330b330b330b330b330b330b3
313d31df3264326432643264326432643264326432723280328f328f328f
328f328f328f32c932c932c9331a336733673367337a338d33a133a133a1
33a133a133a133d033d033d0341234513451345134e23596360236023602
360236023602360236023602360236023602364236423642364236423642
364236423642364236423642364236423642364236423642364236423642
3642364236423642364236423642364236423650365e366d366d366d366d
366d366d36d536d5374b379837f5386c38da394639cc3a113a4e3ae13ae1
3b6a3bde3c223c223c223cac3d173d6b3dcb3e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e263e263e263e263e263e26
3e263e263e263e263e263e263e263e263e263e260000000100001dbe0061
0004002e000300020010002f0086000009a41128000200010000002f023a
000000000000000d03880000000000000000000e006c0388000000030000
0000006403f40000000300000001000e04580000000300000002000e0b62
000000030000000300240b700000000300000004000e0458000000030000
000500180b940000000300000006000e0458000000030000000700760bac
0000000300000008002a0402000000030000000900460c22000000030000
000a070a0458000000030000000b00560c68000000030000000c00280cbe
000000030000000d03880000000000030000000e006c0388000100000000
000000320ce6000100000000000100070d1800010000000000020007109d
0001000000000003001210a4000100000000000400070d18000100000000
0005000c10b6000100000000000600070d180001000000000007003b10c2
000100000000000800150ced0001000000000009002310fd000100000000
000a03850d18000100000000000b002b1120000100000000000c0014114b
000100000000000d01c4115f000100000000000e00361323000300010409
0000006403f40003000104090001000e04580003000104090002000e0b62
000300010409000300240b700003000104090004000e0458000300010409
000500180b940003000104090006000e0458000300010409000700760bac
0003000104090008002a0402000300010409000900460c22000300010409
000a070a0458000300010409000b00560c68000300010409000c00280cbe
000300010409000d03880000000300010409000e006c0388004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e00740073002f0064006500660061
0075006c0074002e006100730070007800a9002000320030003100370020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020007200690067
006800740073002000720065007300650072007600650064002e00430061
006d006200720069006100200068006100730020006200650065006e0020
00640065007300690067006e0065006400200066006f00720020006f006e
002d00730063007200650065006e002000720065006100640069006e0067
00200061006e006400200074006f0020006c006f006f006b00200067006f
006f00640020007700680065006e0020007000720069006e007400650064
00200061007400200073006d0061006c006c002000730069007a00650073
002e00200049007400200068006100730020007600650072007900200065
00760065006e002000730070006100630069006e006700200061006e0064
002000700072006f0070006f007200740069006f006e0073002e00200044
006900610067006f006e0061006c00200061006e00640020007600650072
0074006900630061006c00200068006100690072006c0069006e00650073
00200061006e006400200073006500720069006600730020006100720065
002000720065006c00610074006900760065006c00790020007300740072
006f006e0067002c0020007700680069006c006500200068006f00720069
007a006f006e00740061006c002000730065007200690066007300200061
0072006500200073006d0061006c006c00200061006e006400200069006e
00740065006e006400200074006f00200065006d00700068006100730069
007a00650020007300740072006f006b006500200065006e00640069006e
0067007300200072006100740068006500720020007400680061006e0020
007300740061006e00640020006f007500740020007400680065006d0073
0065006c007600650073002e002000540068006900730020007000720069
006e006300690070006c00650020006900730020006d006f007300740020
006e006f007400690063006500610062006c006500200069006e00200074
006800650020006900740061006c00690063007300200077006800650072
006500200074006800650020006c006f0077006500720063006100730065
002000630068006100720061006300740065007200730020006100720065
0020007300750062006400750065006400200069006e0020007300740079
006c006500200074006f0020006200650020006100740020007400680065
006900720020006200650073007400200061007300200065006c0065006d
0065006e007400730020006f006600200077006f00720064002d0069006d
0061006700650073002e0020005700680065006e002000430061006d0062
0072006900610020006900730020007500730065006400200066006f0072
002000630061007000740069006f006e0073002000610074002000730069
007a006500730020006f00760065007200200032003000200070006f0069
006e0074002c0020007400680065002000200069006e007400650072002d
006300680061007200610063007400650072002000730070006100630069
006e0067002000730068006f0075006c006400200062006500200073006c
0069006700680074006c0079002000720065006400750063006500640020
0066006f00720020006200650073007400200072006500730075006c0074
0073002e0020005400680065002000640065007300690067006e00200069
0073006e002700740020006a00750073007400200069006e00740065006e
00640065006400200066006f007200200062007500730069006e00650073
007300200064006f00630075006d0065006e00740073003a002000540068
006500200072006500670075006c00610072002000770065006900670068
007400200068006100730020006200650065006e00200065007800740065
006e00640065006400200077006900740068002000610020006c00610072
0067006500200073006500740020006f00660020006d0061007400680020
0061006e006400200073006300690065006e00630065002000730079006d
0062006f006c0073002e002000540068006500200047007200650065006b
00200061006e006400200043007900720069006c006c0069006300200068
006100730020006200650065006e002000640065007300690067006e0065
006400200075006e00640065007200200063006c006f0073006500200073
00750070006500720076006900730069006f006e0020006f006600200061
006e00200069006e007400650072006e006100740069006f006e0061006c
0020007400650061006d0020006f00660020006500780070006500720074
0073002c002000770068006f002000610069006d0065006400200074006f
00200073006500740020006100200068006900730074006f007200690063
0061006c0020006e006500770020007300740061006e0064006100720064
00200069006e0020006d0075006c00740069002d00730063007200690070
007400200074007900700065002000640065007300690067006e002e0052
006500670075006c00610072004d006900630072006f0073006f00660074
003a002000430061006d006200720069006100560065007200730069006f
006e00200036002e0039003900430061006d006200720069006100200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002e004d006f006e006f007400790070006500200049
006d006100670069006e006700200061006e00640020005400690072006f
002000540079007000650077006f0072006b00730068007400740070003a
002f002f007700770077002e006d006900630072006f0073006f00660074
002e0063006f006d002f007400790070006f006700720061007000680079
002f006300740066006f006e007400730068007400740070003a002f002f
007700770077002e0066006f006e00740073002e0063006f006da9203230
3137204d6963726f736f667420436f72706f726174696f6e2e20416c6c20
7269676874732072657365727665642e43616d6272696120686173206265
656e2064657369676e656420666f72206f6e2d73637265656e2072656164
696e6720616e6420746f206c6f6f6b20676f6f64207768656e207072696e
74656420617420736d616c6c2073697a65732e2049742068617320766572
79206576656e2073706163696e6720616e642070726f706f7274696f6e73
2e20446961676f6e616c20616e6420766572746963616c20686169726c69
6e657320616e6420736572696673206172652072656c61746976656c7920
7374726f6e672c207768696c6520686f72697a6f6e74616c207365726966
732061726520736d616c6c20616e6420696e74656e6420746f20656d7068
6173697a65207374726f6b6520656e64696e677320726174686572207468
616e207374616e64206f7574207468656d73656c7665732e205468697320
7072696e6369706c65206973206d6f7374206e6f7469636561626c652069
6e20746865206974616c69637320776865726520746865206c6f77657263
617365206368617261637465727320617265207375626475656420696e20
7374796c6520746f20626520617420746865697220626573742061732065
6c656d656e7473206f6620776f72642d696d616765732e205768656e2043
616d62726961206973207573656420666f722063617074696f6e73206174
2073697a6573206f76657220323020706f696e742c207468652020696e74
65722d6368617261637465722073706163696e672073686f756c64206265
20736c696768746c79207265647563656420666f72206265737420726573
756c74732e205468652064657369676e2069736e2774206a75737420696e
74656e64656420666f7220627573696e65737320646f63756d656e74733a
2054686520726567756c61722077656967687420686173206265656e2065
7874656e64656420776974682061206c6172676520736574206f66206d61
746820616e6420736369656e63652073796d626f6c732e20546865204772
65656b20616e6420437972696c6c696320686173206265656e2064657369
676e656420756e64657220636c6f7365207375706572766973696f6e206f
6620616e20696e7465726e6174696f6e616c207465616d206f6620657870
657274732c2077686f2061696d656420746f20736574206120686973746f
726963616c206e6577207374616e6461726420696e206d756c74692d7363
7269707420747970652064657369676e2e526567756c61724d6963726f73
6f66743a2043616d6272696156657273696f6e20362e393943616d627269
6120697320612074726164656d61726b206f6620746865204d6963726f73
6f66742067726f7570206f6620636f6d70616e6965732e4d6f6e6f747970
6520496d6167696e6720616e64205469726f2054797065776f726b736874
74703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261
7068792f6374666f6e7473687474703a2f2f7777772e666f6e74732e636f
6d4d6963726f736f667420737570706c69656420666f6e742e20596f7520
6d617920757365207468697320666f6e7420746f206372656174652c2064
6973706c61792c20616e64207072696e7420636f6e74656e742061732070
65726d697474656420627920746865206c6963656e7365207465726d7320
6f72207465726d73206f66207573652c206f6620746865204d6963726f73
6f66742070726f647563742c20736572766963652c206f7220636f6e7465
6e7420696e207768696368207468697320666f6e742077617320696e636c
756465642e20596f75206d6179206f6e6c792028692920656d6265642074
68697320666f6e7420696e20636f6e74656e74206173207065726d697474
65642062792074686520656d62656464696e67207265737472696374696f
6e7320696e636c7564656420696e207468697320666f6e743b20616e6420
286969292074656d706f726172696c7920646f776e6c6f61642074686973
20666f6e7420746f2061207072696e746572206f72206f74686572206f75
747075742064657669636520746f2068656c70207072696e7420636f6e74
656e742e20416e79206f74686572207573652069732070726f6869626974
65642e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479
706f6772617068792f666f6e74732f64656661756c742e6173707800b900
2001feb40918014a20b801fab40918014a20b801f9b40918014a20b801f8
b40918014a20b801f7b40918014a20b801f6b40918014a20b801f0b40918
014a20b801efb40918014a20b801eeb40918014a20b801edb40918014a20
b801ecb40918014a20b801ebb40918014a20b801e6b40918014a20b801e5
b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b40918
014a20b801e1b40918014a20b801e0b40918014a20b801d3b40918014a20
b801d2b40918014a20b801d1b40918014a20b801cfb40918014a20b801ce
b40918014a20b801cdb40918014a20b801ccb40918014a20b801a0b40918
014a20b8018fb40918014a20b8018eb40918014a20b8018ab40918014a20
b80188b40918014a20b80187b40918014a20b80186b40918014a20b8015b
b40918014a20b8015ab40918014a20b80159b40918014a20b80158b40918
014a20b80154b40918014a20b80150b40918014a20b8014cb40918014a20
b8014bb40918014a20b8014ab40918014a20b80136b40918014a20b80130
b40918014a20b8012fb40918014a20b8012db40918014a20b8012cb40918
014a20b80109b40918014a20b80107b40918014a20b8010540ff0918014a
20f40918014a20f20918014a20f10918014a20f00918014a20ef0918014a
20ed0918014a20ec0918014a20ea0918014a20e50918014a20e40918014a
20e30918014a20e10918014a20de0918014a20da0918014a20d80918014a
20d30918014a20cd0918014a20cc0918014a20ca0918014a20c90918014a
20c80918014a20c60918014a20c40918014a20c20918014a20c00918014a
20bf0918014a20bd0918014a20b30918014a20b10918014a20af0918014a
20a50918014a20a40918014a20a00918014a208e0918014a208d0918014a
208c0918014a208b0918014a208a0918014a20890918014a20850918014a
20840918014a2083091801403e4a20800918014a207f0918014a207e0918
014a207d0918014a20620918014a20510918014a20500918014a20480918
014a20420918014a200e0918014a0f41630441001f0441002f0441003f04
41004f0441005f0441006f0441007f0441008f0441009f044100af044100
bf044100cf0441000d005f03ea0001008003f4009003f400a003f400b003
f400c003f400d003f400e003f400f003f40008002f0433003f0433004f04
33005f0433006f0433007f0433008f0433009f043300af043300bf043300
0a001f0434002f0434003f0434004f0434005f0434006f0434007f043400
0700cf042300df042300ef04230003000f0423001f0423003f0423005f04
23009f0423402305f0e201b0fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0
fd03c0ffd0ffe0fff0ff0470410a0425000100c0042500d0042500e00425
00f00425400c04e0bef0be02e0bef0be020f41110421003f042100020010
02580001000f025800e002580002000f040a0001000f0408b4010f26010f
411b04070001000f04060001007f02170001000f029c001f029c002f029c
003f029c004f029c005f029c000600df029c00ef029c00ff029c405303df
e016171cd4d516171c7b7c161b7b7c19d1d216171c767716171c6d701617
1c6c6f16171c6b6e161b6b6e7f721a747514151c676a14151c666914151c
6568141b656885711a1973167a4319217943192119413102920099029200
02001c0292002c029200020299029a029b000c028d028e028f000c028a02
8b028c000c001b0299008b02990002000f0299009f029900bb029900db02
99000402a5028b02a7000d029f029a02a1000d029c028e029e000dffe802
8eb2142339b9ffe8029ab2142339411a0282027d0008002b0281027c0005
002b027e027a0004002b027d027a0004002b027a02570005002b02770267
0005002b02670257b2052b20b80270b21b2039bd027202570004002b026e
0257b2042b20b80257b331333909414102710019027100aa025700b80257
00040069027100da025700e802570003028402790006002b028002790004
002b027f02790008002b027b02790008002b027902560006002b02780266
0000002b027602660008002b027502660008002b027302660008002b0266
02560006002b027402560000002b027302560000002b026f0256b2072b29
415002560001008602560001025d025e025f000c025102520253000c024e
024f0250000c000b024e000b0251000a025d003b024e0059025100760251
0075025d009b024e00b5025d00d9024e000a0269024f026b000d0263025e
0265000d026002520262000d0269003c0263003c0260003c025d003c0251
003c024e003c0244023c0005002b024302110002002b0240023c0005002b
023e02110004002b023d0211b2042b464115023c00010046023c00c6023c
0002023b02110007002b023902110006002b023702110004002b02210211
b2072b20b80233b21316394116022f02110004002b022e02110004002b02
2d02110005002b022c02110004002b022b02110004002b022a0211b2052b
474142021100010005021100a502110002003b0233004b02330064021100
7402110004024202100007002b024102100005002b023f02100002002b02
3a02100007002b023802100007002b023602100007002b02350210000700
2b022002100007002b023402100005002b023102100005002b0230021000
07002b022902100007002b02280210b2072b8a416e02100001001a021000
b902320002021702180219000c020b020c020d000c02080209020a000c00
0b0208000b020b000a0217003b02080059020b0076020b00750217009b02
0800b5021700d90208000a022302090225000d021d0218021f000d021a02
0c021c000d0223003c021d003c021a003c0217003c020b003c0208003c01
53014d0002002b014e014d0002002b0156015c0004002b0155015c000400
2b0157015c0002002b01da01d4000a002b01d801d4000a002b01e501e000
05002b01e101e00005002b01e001eb0005002b01ef01eb0002002b01ec01
ebb2052b40b801ebb2090a39b9ffc00104b2313139b9ffc00104b21b2039
b8ffc0b4c71f203940b80103b22c2c39ba010301000100b21f2223b90103
0100b3c01e1e23ba010301000100b21d1d23b901030100b3c01c1c23ba01
0301000100b21b1b23b901030100b3c0141a23b901030100b3800b1323b9
01030100b340090a23b901020101b340508b23b901010100b340508b2341
0a01020100004f001f01010100004f001fffc00100b2505539b9ffc00100
b323233940b80100b71d1e3940e81b1b39b8ffc0b4e724253956b8010840
1301ddd8052b3bd64bd60240b00b0d39c1c0052bb8ffc040379f13133940
9c2f30399c9a012b9b9a052b9a91042ba999042b9992032b40c52c313992
91032b889198910209631863c7630320630d0f39b8fff0b4471f2539cbb8
010a401c019895012b379e019695022b1897262a3917970110953f4039d9
9501bc0136012c0003002b0130b2cd042bb8012fb2cc042bb8012db2cd03
2bb8012cb2cd042bbc014c014a0003002b014ab27f052bb9015b0154b204
2b0f41190154001f01540002018601880002002b018701880004002b0189
01880004002b0188018f0003002b018e018f0004002b018fb385052b3f41
0c01a0000101ce01cc0003002b01d201cc0006002b01d101ccb2062b40b8
0107b2323239b80107b2af032bb8ffc0b3de1e2039b8ffc04011dc181a39
c9ca032bcac8042b40c8212239b8ffc0b3c8151739b8ffc0b3c6242539b8
ffc0b3c6161a39b8ffc04023bf2d31395051032b40511b1b39e5cc042be4
e3032b40e32a2a39cdcc052b40cc424439b8ffc0b3cc272739b8ffc0b7cc
171a39c2ea012bb80109b2da032bb8ffc04033ea252539dfea0140c41b1d
39b3b1052bb1c0052b40c03d3d39c0af042bd3af052baf7d052b20da1216
39c5bd01208e01108e01b8ffc0b38b363839b8ffc0b38b272b39b8ffc040
328b171a398c8d052b8d8a042b898a052b8a7f052bf4ef032bf2ef052bf1
80022bf0a0042bef85052b40ec32343940ec1b1d39b8ffc0b3a0515239b8
ffc0b3a0454739b8ffc0b3a0383c39b8ffc0400ba02c3139dfa001a08002
2bb8ffc0b394313139b8ffc040d480181a39817f012b7e7d052b7d7f052b
ed7f052bd87f017f85251f8885012b8785012b8485052b8385052b298539
854985036685014685013685012685011b37151836151535151234150f33
150c3215093115063015032f15002e15f9fa0f20f930f90226270e28270f
2a2b0e2c2b0f22230e24230f1e1f0e201f0f00051005023c3d0e0b3c743c
993c030f10110c090a0b0c0607080c0304050c0001020c0603641f702a01
0f2a010b0f4b0f020b003b0044037403ab00db0f060b000b030b0f3b003b
0959035b0976039b009b09990fd9000cb9010b010c402a0f1b011d0d1807
1a0d1510170d1204140d2ff96ff99ff9a0f9cff9d0f9063ff940f9aff9b0
f9e0f90500b8010bb22ff92fba010b003f010b403004fb3cf93cf73cf53c
2c3c2a3c283c263c243c223c203c1e3c1b3c183c153c123c0f3c093c063c
033c003c035050335401b0124b004b5442b013014b004b5342b0332b4bb8
032052b0322b4bb009505b58b101018e59b0332bb00288b8010054b00488
b8020054b012435a5b58b80119b101018e851bb900010100b04b60858d59
2b2b1d42b0644b5358b20380801d4259b0324b5358b20390901d4259004b
b03251b01b23422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374
752b2b2b2b2b73747573742b2b2b2b2b2b732b732b2b2b2b2b2bb1282645
b02a4561b02c4560442b2b732b2b2b2b2b2b2b2b2b2b2b0173737373742b
2b2b2b2b742b2b2b2b2b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b7475732b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b732b2b2b012b2b2b2b2b00742b74
2b2b742b732b2b74742b2b2b2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b
2b2b2b2b2b2b2b2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b0073
74752b2b2b2b2b2b2b2b2b2b2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b
732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b73742b2b2b0173742b2bb018b03f4b53422b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb101322b4bb0505242b002435c4bb064524b
b01e505b60b01a23424bb0c8524bb036505bb00e23420073747373737373
7373747373747375737374757373747373737373b100024354b102024354
b1060243545b5b58416301fe006401fa006401f9006401f8006401f70064
01f6006401f0006401ef006401ee006401ed006401ec006401eb006401e6
006401e5006401e4006401e3006401e2006401e1006401e0006401d30064
01d2006401d1006401cf006401ce006401cd006401cc006401a00064018f
0064018e0064018a0064018800640187006401860064015b0064015a0064
01590064015800640154006401500064014c0064014b0064014a00640136
006401300064012f0064012d0064012c0064010900640107006401054069
64f464f264f164f064ef64ed64ec64ea64e564e464e364e164de64da64d8
64d364cd64cc64ca64c964c864c664c464c264c064bf64bd64b364b164af
64a564a464a0648e648d648c648b648a64896485648464836480647f647e
647d64626451645064486442640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b00>
[16341 15481 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4694 24 <0001005afff004da055500310054b0852b58401c0820032091400813132a
2d03161516a6442b150331a02626331a7f0e2fe112392fe1003f332b1100
1733183f1aed2b31301b400e0820916c0813132a2d03162b150300183f33
1117333f2b30315901140706070e0223222e023511342e02273521150e02
1511141e0233323e023511342626273521150e0215046514132623689464
79ad71320a13243101a4382c10294a664c466a471a11273d018f3a2b1001
d86d4f4b3a34492a367ba78102924e3720170d31310e234652fd3c618449
213164927b02715740221031310f24445200>KCAAAA+Cambria AddT42Char 
2 5984 133 <00010069fff0035203cd002100c6b0852b5840442001300102b00101011f
8013472000121012201203091f12010f120119031240262948120f180f03
0f974018161f06030695401f1010100a1220131323020101230a831b2fe1
11392fcd12392f1a19cd1239182f003f1aed2b00183f1aed2b001810d62b
5f5e5d725e5d1a19ed1a1810cd5d7131301b40312001300102b00101011f
801213476c00121012201203091f12010f12011903124026294812180f97
6c18161f06956c1f1000183f2b3f2bc62b5f5e5d725e5d2b1a10cd5d7130
31590115232e022322060615141e0233323637170e032322263534363633
3216034a7f11324231466c3f183a604745774039334e595733bdc870ca84
528b03a5d1414b1e5ab885558d6438364442383d2913fbed94e57c13>KCAAAA+Cambria AddT42Char 
2 6282 134 <00020069fff0042b0597002200360095b0852b58402e11aa10100fa74410
1533142f182f032f9740181622291f1f29032995401f100706a744070008
010a851214220323b8ffc040090f014d2323382c831b2fe112392f2b1733
e1003f3f2b00183f1aed2b11120039183f1aed2b11003333183f2b001810
e531301b401711aa10153314182f976c1816221f29956c1f100700080100
183f3f3f2b393f2b32323fe530315901342e032735373311141e02171507
2337270e02232226353436363332161711342e0323220615141633323e04
350304030d172733f23b06142b36ec3c0c0f3f5d693ca4b274c57b426c39
0e2138432f80866e702c3a383a1b0e043f604c351e1209340afb7a4e4328
190b340aa404434328f9eba4e5701518feb14e5e402c14cdc0c0c80f213a
303e3100>KCAAAA+Cambria AddT42Char 
2 6586 135 <00020068fff0039403cd0019002100c4b0852b5840422013161e21110311
964021210b16004720df19ef1902001910192019f0190409031916041603
16974004160b1e031e95400b101920171200211210831a1a231284072fe1
12392ff11239d611391a19cd00183f1aed2b00183f1aed2b001810d65f5e
5d711a19ed111239182f1aed2b111200393931301b402d2013161e211196
6c21210b161900476cdf19ef1902001910192019f019040903190416976c
04160b1e956c0b1000183f2b3f2bc65f5e5d712b1112392f2b1112393930
3159250e022322263534363633321e0217211514161633323637032e0223
2206070380406b804dced26bc681658e552f03fd8a3579615283416b062a
5444677b0baa434c2bf7f195e47c406fa9881276a15b3d4501556c8949a5
9900>KCAAAA+Cambria AddT42Char 
2 8326 142 <0001003f000001dc05970016004cb0852b58401504070607a74406151413
a74414001501160100850db8ffc0b310014d0d2f2be1003f3f3f2b00183f
2b11003331301b400a0407061514001501160100183f3f3f3f1133303159
25141616171521353e033511342e0327353733016c102d33fe7332271107
030d172733f13cfa5643230d31310d1c2743360345604c351e1209340a00
>KCAAAA+Cambria AddT42Char 
2 9016 144 <000100530000042f03cc003c00a1b0852b58403d2e100f014d2d280f014d
2c280f014d2b280f014d191c3c03020102a7441a011529aa282827a74428
0f2c120f300f030f973010368508083e2c2a148522b8ffd0b30f014d22b8
ffc0b41011014c222f2b2be1323212392fe1003fed2b11003333183f2b00
1810e53f332b1100173331302b2b2b2b1b4014191c3c03021a011529aa28
0f2c12300f976c301000183f2b32323fe53f331117333031592121353e03
3511342e0423220e021511141616171521353e033511342e022735373307
173e0233321e031511141e0217042ffe762722170d08131b253027274654
26102d33fe782721170d0418312dea3d0b0e4a5b5d343655412a15081426
2f310c122043440106467249291d111f4c4a30fe8b5643230d31310c1220
424601b4404e2f17083509a3044b402319344d6c53fe87453e22170d>KCAAAA+Cambria AddT42Char 
2 9344 145 <00020069fff003d603cd000d001c0065b0852b58401f0011031195400016
071a031a95071016100b014d16830a200c014d0a0a1e0eb8fff0b50b014d
0e8303b8ffe0b30c014d032f2be12b12392f2be12b003fed2b00183f1aed
2b31301b400c0011956c0016071a956c071000183f2b3f2b303159052226
353436363332161514060601141633323e02353426262322060214d0db73
c880d6dc6ecafe88837a435e3b1a417048798110f5f0a5e46ff9e9a6e471
01facedd416e914f93c25bd2>KCAAAA+Cambria AddT42Char 
2 9818 148 <000100530000032d03cd002700a1b0852b58401e16191819a74418152524
a74426aa250f0f010c000810080214030805800cb8fff04012101648050c
030c051009080829270112851eb8ffd0b30f014d1e2f2be1323211392fcd
003fcd2b002b1a1810cd5f5e5d1133333fe52b00183f2b11003331301b40
151619181526aa250f0f010c0008100802140308800cb8fff0b61016480c
40051000183f1acd2b1acd5f5e5d1133333fe53f113330315901173e0233
32171523262623220e021511141616171521353e033511342e0227353733
016f0e375e6d453a2f7118362f24474219163333fe6d2621180c0418312d
ea3d031603434d2a06e636312a504630fea25b45200931310c1220424601
b4404e2f1708340a>KCAAAA+Cambria AddT42Char 
2 10506 150 <00010025fff002c204b3001c0097b0852b58403117100314201340262f48
13400c0f481310971716020a0f06010c030607400a00a7441b0aee070f13
1409091e07050b851a2fe1393211392fd6cd003fed322b001a1810cd5f5e
5d11393ffdd62b2b1a19cd2b31301b4023141340262f4813400c0f481317
10976c1716020a0f06010c030607401b070aee6c070f00183f2b321a10cd
5f5e5d11393f2bd62b2b19cd303159133e0337331521152111141e023332
363717060623222635112325323e23140b8e0143febd102c382c2846222d
477f44817e94038a08283f5f5bf765fe436173411c211f36453e99a3022b
>KCAAAA+Cambria AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>KCAAAA+Cambria AddT42Char 
KCAAAA+Cambria /CharStrings get begin
/U 24 def
/c 133 def
/d 134 def
/e 135 def
/l 142 def
/n 144 def
/o 145 def
/r 148 def
/t 150 def
end
KCAAAA+Cambria /Encoding get
dup 85 /U put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/IOEGSA+Cambria /KCAAAA+Cambria findfont ct_VMDictPut
/IOEGSA+Cambria*1 
[85{/.notdef}rp /U 13{/.notdef}rp /c /d /e 6{/.notdef}rp /l 
/.notdef /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [18 0 0 -18 0 0 ]msf
28.6251 265.668 mo
(Uncontrolled)
[11.6639 10.044 7.93793 9.55811 10.098 6.08395 7.23602 9.55811 4.94992 4.87793 8.78412 0 
]xsh
40.6051 407.729 mo
194.395 407.729 li
194.395 330.835 li
40.6051 330.835 li
cp
.837334 .840193 .847625 rgb
ef
40.6051 407.729 mo
194.395 407.729 li
194.395 330.835 li
40.6051 330.835 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IOEGSA+Cambria gcheck setglobal} if

2 0 3 <> IOEGSA+Cambria AddT42Char 
3 6156 523 <000100b4fe4d02e3059b001e0048b0852b5840170a0b030b96400a01001e
031e96001b0b1e15840505201f1112392ffdc632003fed2b00183f1aed2b
31301b400c0a0b966c0a01001e966c001b00183f2b3f2b30315901222626
02111012363633152207060706070607061514121716171617163302e3aa
d778363578d8aa46363d2b301e2311121e231c2a25333b5efe4d66d1014e
011e011c0151d46a520c0e282c4f5c98a1ffe1fec564542f29151800>IOEGSA+Cambria AddT42Char 
3 6334 524 <0001002bfe4d025a059b001e0048b0852b5840170a0b030b96400a1b001e
031e9600011e0b05841515201f1112392fedc632003fed2b00183f1aed2b
31301b400c0a0b966c0a1b001e966c000100183f2b3f2b30315913321616
1211100206062335323736373637363736353402272627262726232baad7
78363578d8aa46363d2b301e2311121e231c2a25333b5e059b66d1feb2fe
e2fee4feafd46a520c0e282c4f5c98a1ffe1013b64542f291518>IOEGSA+Cambria AddT42Char 
3 5798 481 <00010018feec014300e8000d003cb0852b58401206b2c00d40090d480d06
070d02b10b0b0f0e1112392fe1c6c632002f2b1aec31301b400906b2c00d
40090d480d00182f2b1aec30315925161514060607273e0235342701350e
30695c36332e1407e84644467473453d304d624a4c4a>IOEGSA+Cambria AddT42Char 
2 540 6 <00010077fff004120565002000bdb0852b58401014100e1548140f125f12
6f1203121700b8fff040300e154800000250026002d002040903021e170e
030e914017131e060306911e041e010606020a0113a4021212220a7e1a2f
e112392f33e132111239111239003fed2b00183f1aed2b001810c45f5e5d
392b10c45d392b31301b401014100e1548140f125f126f1203121700b8ff
f0401d0e154800000250026002d002040903021e170e916c17131e06916c
1e0400183f2b3f2b10c45f5e5d392b10c45d392b3031590111232e022322
06021514121633323636373311060623220011341224333216041263184a
624567a15c4c946c52684720635ec576fefefc870106b65b9a0538feeb57
672c89feedc3c4feeb8d2f6663fee2191901580155d60142b013>IOEGSA+Cambria AddT42Char 
2 836 7 <00020078000004d40555001b002b0055b0852b5840201b1e031e911b401b
01a6441b120e0ca6440e290329910e03137d25252d1c7f062fe112392fe1
003fed2b2b00183f2b001a1810ed2b31301b400c1b1e916c1b120e29916c
0e0300183f2b3f2b30315933353e033511342e02273521321e0215140207
0607060623271633323e0435340226232207782e28160a0a17262f01b6bd
f1a6524d4a405d4dcaa739284e54846c56361975d594443d310c16224045
0361463f22150d3153a2f1a7a9feff574c3128225d041c3c6b8baa65cb01
05780400>IOEGSA+Cambria AddT42Char 
2 4102 22 <00010070fff003950565003000e1b0852b58400f2f100e15482f2d2f0001
00000b0416b8fff0403c0e154816130018101820188018040e0318181c0b
2424041c2d04030491402d13131c031c91130418a44f170117172820ed0f
0f3028ed07073200a4302fe112392fe112392fe111392f5de1003fed2b00
183f1aed2b1112003911331239182f5f5e5d12392b1112392f5d12392b31
301b400f2f100e15482f2d2f000100000b0416b8fff040230e1548161300
18101820188018040e0318181c0b24241c2d04916c2d13131c916c130400
183f2b3f2b1139113312392f5f5e5d12392b1112392f5d12392b30315913
1e0233323635342626272e02353436363332161711232e02232206061514
1616171e0215140e0223222711d414446c55757d34767975884369cb834c
916d6317465e4b41673c336c6a808d4f4275a3619dcd01375866317a754b
665a3c3a6f824d70a55a101cfef258622730614347625434406e8d5e6991
5b2935011200>IOEGSA+Cambria AddT42Char 
2 8100 139 <00020053000001e9054400030019008cb0852b58402a17041904a7441915
11aa10100fa744100f02637003010f03df03020f035f03df030303018302
1385020ab8ffe0b30f014d0ab8ffc0b310014d0a2f2b2bc4e110e1002f5d
715ded3f2b001810e53f2b11003331301b401e1704191511aa100f030263
6c7003010f03df03020f035f03df030309030300182f5f5e5d715d2b3fe5
3f113330315901152335033e033511342e02273537331114161617152101
7fb8662721170d0418312de93d102d33fe780544c2c2faed0c1220424601
b4404e2f17083509fd355643230d3100>IOEGSA+Cambria AddT42Char 
2 10096 149 <0001005efff0030a03cd0031010bb0852b5840162f1a3f1a4f1a03bf1a01
001a101a201a031a1a261d01b8ffc040481216482f0101010105260c760c
860c02250c350c0203000c100c400c500c600c0509050c1d2e151d031d95
4015162e050305952e101aa519192a3201a5000008108522223308852a2f
e112392fe111392fe11112392fe1003fed2b00183f1aed2b111200395f5e
5d5f5d5d11331239182f5d2b1112392f5d5d7231301b40162f1a3f1a4f1a
03bf1a01001a101a201a031a1a261d01b8ffc040311216482f0101010105
260c760c860c02250c350c0203000c100c400c500c600c0509050c2e151d
956c15162e05956c2e1000183f2b3f2b11395f5e5d5f5d5d113312392f5d
2b1112392f5d5d7230315901232e0223220615141616171e0215140e0223
2226273533161633323e0235342626272e02353436363332161702ff6016
3c4c37505f265065666f3f36628750549e4b621b6a5d2445362028546a5b
6e3f59a871427b5d02e13c451c4b412e3c342b2c4a62444f6c441e1914d1
5c530f233c2d3340352d264862435279400d1300>IOEGSA+Cambria AddT42Char 
IOEGSA+Cambria /CharStrings get begin
/space 3 def
/parenleft 523 def
/parenright 524 def
/comma 481 def
/C 6 def
/D 7 def
/S 22 def
/i 139 def
/s 149 def
end
IOEGSA+Cambria /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 67 /C put
dup 68 /D put
dup 83 /S put
dup 105 /i put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IOEGSA+Cambria*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 22{/.notdef}rp 
/C /D 14{/.notdef}rp /S /.notdef /U 13{/.notdef}rp /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [15.96 0 0 -15.96 0 0 ]msf
65.8751 374.268 mo
(Diodes)
[10.5656 4.43689 8.47485 8.90555 7.7886 0 ]xsh
116.515 374.268 mo
(\(Si, )
[6.09677 7.9162 4.43689 3.27182 0 ]xsh
141.715 374.268 mo
(SiC)
[7.92004 4.4407 0 ]xsh
163.075 374.268 mo
(\))sh
188.245 298.538 mo
342.035 298.538 li
342.035 221.644 li
188.245 221.644 li
cp
.837334 .840193 .847625 rgb
ef
188.245 298.538 mo
342.035 298.538 li
342.035 221.644 li
188.245 221.644 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IOEGSA+Cambria gcheck setglobal} if
2 8476 143 <000100530000065f03cc0060011cb0852b5840560b080f014d0a180f014d
09200f014d04080f014d03080f014d02200f014d01200f014d00200f014d
083306181b334f5205363536a744501a35155faa5e5e5da7445e0f010928
2b46054306430343970d0610092d853cb8ffe8b310014d3cb8ffe840100f
014d3c3c5813850f210143df210121b8ffe0b310014d21b8ffe8400b0f01
4d2121626000488558b8ffc0b311014d58b8ffe8b30f014d58b8fff0b310
014d582f2b2b2be1323212392f2b2b715e5de112392f2b2be132003f33ed
2b11001733183f2b001810e53f33332b1100173311123931302b2b2b2b2b
2b2b2b1b401f083306181b334f520536501a35155faa5e0f0109282b4605
0643976c0d061000183f332b17323fe53f33331117331112393031590117
3e03333216173e0233321e021511141e02171521353e033511342e042322
0e021511141e02171521353e033511342e0423220e021511141e03171521
353e033511342e0227353733016f0e3c4d483f21647e184b5d6138436143
1f0a13262dfe772722170d09131b222e26284551240a13262dfe77272217
0d0a1521222e1d29484b26060d142525fe782621180c0418312dea3d0322
043c3d25105c5f4c482727517a67fe874c3a20170c31310c122043440106
556f42261c10204c4d34fe934c3a20170c31310c1220434401065970442a
160b25464c2cfe89393c2215130a31310c1220424601b4404e2f17083509
>IOEGSA+Cambria AddT42Char 
IOEGSA+Cambria /CharStrings get begin
/m 143 def
end
IOEGSA+Cambria /Encoding get
dup 109 /m put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IOEGSA+Cambria*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 22{/.notdef}rp 
/C /D 14{/.notdef}rp /S /.notdef /U 13{/.notdef}rp /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [18 0 0 -18 0 0 ]msf
204.755 265.668 mo
(Semi)
[8.92804 8.71213 14.976 0 ]xsh
246.395 265.668 mo
(controlled)
[7.9379 9.55811 10.08 6.08395 7.23602 9.55811 4.94992 4.87793 8.78412 0 ]xsh
226.685 407.729 mo
380.475 407.729 li
380.475 330.835 li
226.685 330.835 li
cp
.837334 .840193 .847625 rgb
ef
226.685 407.729 mo
380.475 407.729 li
380.475 330.835 li
226.685 330.835 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IOEGSA+Cambria gcheck setglobal} if
2 3770 21 <00020079000004f80555002f003c009bb0852b5840351c1b003131000331
914000003b072409060706a6442126071413a644143b033b9114032a1f1f
1b26251b01187e37373e2531017f0d2fe1322f11392fe111391133123911
33003fed2b2b00182f33332b11003333111239182f1aed2b111200393931
301b401a1c1b0031916c00003b073100916c240906212607143b916c1403
00183f2b2f33331133332b1112392f2b39393031590111141e0217152135
3e023511342e0227352132161514060715161617171e0217152126262727
2e0323031133323e0235342626232201aa0b16262efe5a3e2a0d0a17262e
01efeae897973d57355a27383a30feeb2644215828332b31316e71576c5c
374184705a0251feac484121150d31311027484a0361453f23150d31aab3
89c03608195d62a4484c280831357a3fa74c481d0b02a8fdae19467d5b5f
7e42>IOEGSA+Cambria AddT42Char 
IOEGSA+Cambria /CharStrings get begin
/R 21 def
end
IOEGSA+Cambria /Encoding get
dup 82 /R put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IOEGSA+Cambria*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 22{/.notdef}rp 
/C /D 13{/.notdef}rp /R /S /.notdef /U 13{/.notdef}rp 
/c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [18 0 0 -18 0 0 ]msf
288.595 374.888 mo
(SCR)
[8.88004 10.0861 0 ]xsh
374.325 298.538 mo
528.115 298.538 li
528.115 221.644 li
374.325 221.644 li
cp
.837334 .840193 .847625 rgb
ef
374.325 298.538 mo
528.115 298.538 li
528.115 221.644 li
374.325 221.644 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IOEGSA+Cambria gcheck setglobal} if
2 1392 9 <00010079000004090555002a00d8b0852b584053000e100e200ea00eb00e
0509030e09020208090916030f111f112f11af11bf110509111691400009
011503092a1e099109301c1f1e1fa6441e2a29a6442a080308912a030fa4
110e0e2301a402022c09177f232fe13212392fe112392f33e1003fed2b2b
00182f2b1100332b00182f5f5e5d1afdc65e5d2b11120039182f10c65f5e
5d31301b4031000e100e200ea00eb00e050e09020208090f111f112f11af
11bf110509110916916c0009011503091c1f1e2a08916c2a0300183f2b2f
11332f5f5e5d2bc65e5d1112392f10c65d3031590111232e032321113332
3636373311232e02232311141e02171521353e023511342e022735040962
16292d3c31fedbce2c32210f5e5e0f222f2ece0e203628fe443e2a0d0a17
262e0555fed244542c12fde01d4447fe5a44451dfe783c482a1509313110
27484a0361453f23150d3100>IOEGSA+Cambria AddT42Char 
2 10746 151 <00010049fff0042503bc002c008bb0852b5840221daa1c1c1ba7441c1520
0a072307030797402316132c012ca74414010f1685201e0cb8ffe040090f
014d0c0c2e028528b8ffc0400911014d28200f014d282f2b2be112392f2b
3333e1003f332b110033183f1aed2b11003333183f2b001810e531301b40
111daa1c15200a2307976c2316132c14010f00183f3311333f2b32323fe5
303159132111141e0233323e023511342e0327352111141e021715072337
2706062322262635113426262749011d1224423a26465625060e13232701
1d06142a36e53d060f53974c5b763a0d253e03bcfe03757a3e2a1e4b4a31
0177393a2316120a31fd554d4428190b340aa4045a54488f82017a543f25
1000>IOEGSA+Cambria AddT42Char 
2 11630 155 <00010014fe4a040a03bc002e00b1b0852b58403e0b18111648e50bf50b02
0740111648000710072007030903070b40040b030bab40041c2000101615
272a03181718a74428170f08a50707161000202029162f12391133331139
2fed003f332b11001733183f33333f1aed2b001a1810cc5f5e5d2b5d2b31
301b402c0b18111648e50bf50b0207401116480007100720070309030740
040bab6c041c2000101615272a031828170f00183f331117333f33333f2b
1acc5f5e5d2b5d2b303159050e022322273533161633323e0237012e0227
3521150e021514161713133636353426273521150e0207020837687d5637
45590c24221e2f33452bfee81b21262701972f26120d0eb2c811132f3a01
76272a2a1d527c9a4e0dc629201738745902f1493a1e0931310b15211a1b
3a27fe0b01e028431d2b2c0d313108214740>IOEGSA+Cambria AddT42Char 
IOEGSA+Cambria /CharStrings get begin
/F 9 def
/u 151 def
/y 155 def
end
IOEGSA+Cambria /Encoding get
dup 70 /F put
dup 117 /u put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IOEGSA+Cambria*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 22{/.notdef}rp 
/C /D /.notdef /F 11{/.notdef}rp /R /S /.notdef 
/U 13{/.notdef}rp /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u 3{/.notdef}rp /y 134{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [18 0 0 -18 0 0 ]msf
390.875 265.668 mo
(Fully )
[9.48602 9.93604 4.93195 4.55396 9.07196 0 ]xsh
432.635 265.668 mo
(controlled)
[7.93787 9.55811 10.08 6.08392 7.23602 9.55811 4.94995 4.87793 8.78412 0 ]xsh
412.775 407.729 mo
586.665 407.729 li
586.665 330.835 li
412.775 330.835 li
cp
.837334 .840193 .847625 rgb
ef
412.775 407.729 mo
586.665 407.729 li
586.665 330.835 li
412.775 330.835 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: KCAAAA+Cambria AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IOEGSA+Cambria gcheck setglobal} if
2 236 5 <000300790000046a0555001d002a00360092b0852b58403b1615362a2a36
033691402a0c1d2a9128301d2d032d911d401d01a6441d120c260326910c
400c0ba6440c03117e212131162a197e3131382a2b7f052fe13212392fe1
113912392fe1003f2b001a1810ed2b00183f2b001a1810ed2b2b00182f1a
ed2b111200393931301b401316152a36916c2a1d2d916c1d120c26916c0c
0300183f2b3f2b2f2b393930315933353e023511342e0227352132161615
14060607151616151406062303323635342e022322060711111633323636
353426262323793e2a0d0a17262e02239fc15e436c55888c79da9b2498a1
2d4f6c3f267c1f495a8391414794829b311027484a0361453f23150d3144
8569578054240929ab7688ac4d02f1938c455b36170402fdfafd6e074281
61617e3e>IOEGSA+Cambria AddT42Char 
2 1050 8 <000100790000042a0555002e00ceb0852b58b9000fffc0404b090c480f0a
1f1f17180202090a0a17031240090c48121791400a2e220a9128302223a6
44221803189140222e2da6442e090309912e0311a40f12121801a4020218
2120a41f1f300a187f272fe13212392fe13212392fe112392f33e1003fed
2b2b00182f1aed2b2b2b00182f1afdc62b2b11120039182f1112392f10c6
2b31301bb9000fffc04023090c480f0a1f1f17180202090a1240090c4812
0a17916c0a2218916c222e09916c2e0300183f2b2f2b2f2bc62b1112392f
1112392f10c62b3031590111232e0423211133323636373311232e022323
1121323e0337330321353e023511342e0227350420620f2022293827fec4
d62c32210f5e5e0e222f2fd60137313d2c2217146313fc623e2a0d0a1726
2e0555fed2314a321e0bfdf4193c40fe803c3d1afdbf1129424744fea131
1027484a0361453f23150d31>IOEGSA+Cambria AddT42Char 
2 1734 10 <00010077fff004980565002d00c6b0852b58401a28252625a64400260109
0326260c021d051d031d91400105130fb8fff040290e15480f0010501060
10d010040903100c0c150315910c04150c0c0810a41111022d7f20202f19
7d082fe112392fe139392fe111391133003fed2b001810c45f5e5d392b3f
331aed2b1100331239182f5f5e5d2b11003331301b401128250026012626
0c02051d916c0105130fb8fff040170e15480f001050106010d010040903
100c0c15916c0c0400183f2b10c45f5e5d392b3f332b3211392f5d113330
31592507270606232200113412243332161711232e022322060215141216
3332363535342626273521150e031504364e49418e5cfdff008c0106b15d
ac69631b4a674f6da45b4d986f767213303701942424130705154e282601
5b0156d50142ad151afeed5a652b8cfeefc1c4feea8d676b3c5a502c0e31
310c1f2e433e>IOEGSA+Cambria AddT42Char 
2 2370 12 <000100790000021f0555001a003cb0852b58401205080708a64407151213
12a6441303007f0c2fe1003f2b110033182f2b11003331301bb605080715
12130300183f11332f113330315925141e02171521353e023511342e0227
3521150e031501aa0915292efe5a3e2a0d0a17262e01a62c27170bfa433e
24180c31311027484a0361453f23150d31310b1621424500>IOEGSA+Cambria AddT42Char 
2 3006 16 <000100750000060d05550036009bb0852b58403b34194009124819193325
0b0e2703242524a6440d2500313331a64435171b033303191834180f014d
34341f06ed161735031212381a1b33031f802b2fe1173212392f1733e112
392f2b3333003f17332b110033182f332b11001733111239182f2b333130
1b4019341940091248191933250b0e2703240d25003135171b0333030018
3f173311332f331117331112392f2b33303159010e031511141e02171521
353e023511341237230123012316121511141e02171521353e023511342e
02273521010121060d2c27170b0915292efe5f392c10090611fe7473fe90
1105090915292efe933e2a0d0a17262e0165015f0182015205240b162142
45fc9f433e24180c31310e244651017f97013539fc2103ef3dfec0a9fe92
433e24180c31311027484a0361453f23150d31fc3303cd00>IOEGSA+Cambria AddT42Char 
2 3588 18 <00020077fff004c30565001000200047b0852b5840170014031491400013
091c031c9109040d7d181822117d052fe912392fe9003fed2b00183f1aed
2b31301b400c0014916c0013091c916c090400183f2b3f2b303159052226
2602353412363332161215140206011012333236123534022623220e0202
8e78c58d4d88fda7b2f37b8cfffe0db3ac6d984c599a665a815527104fa7
0104b5df0140a79dfecfdbeafebea002cbfecdfec08b010cb3da011f8254
9bdc>IOEGSA+Cambria AddT42Char 
2 4468 23 <000100420000047c055500200081b0852b58402d0f121112a64411030f1f
010d031f1f110919001903199140000302a4030e0a1f18421fa42020210a
7f181822211112392fe112392fe12b0110f2e100183f1aed2b1100331239
182f5f5e5d332f2b11003331301b40130f1211030f1f010d031f1f110900
19916c000300183f2b3211392f5f5e5d332f1133303159132111232e0323
2311141e02171521353e04351123220e02072342043a62162b3037377f0d
1b2e31fe371e2e1d130b7e2f3d342b13630555fea456643416fc003b4629
170b3131071017243e3c040012396950>IOEGSA+Cambria AddT42Char 
2 5194 131 <00020050fff003b003cd00260032016bb0852b58b90001ffe8b40f10014c
00b8ffe8400a0f10014c022e011d0428b8ffe04044090f48280b0b270327
9640700b800bb00bc00b04000b100b500b900ba00b050c030b0b1930012e
042e032e9e4004162524a744251520133013a013b013043013b0130213b8
ffc04027272c48041314130213190d151d152d1503090315101910031098
1910131414081e85010b260332b8ffe040090f014d3232342a8508b8ffe0
b30f014d082f2be112392f2b1733e112392fcd003fed2b1100335f5e5d18
10c4712b5d713f2b00183f1aed2b110033331239182f5f5e5d711aed2b11
00332b5f5e5d31302b2b1bb3452e0128b8ffe04038090f48280b27966ca0
0bb00be00bf00b04300b400b800bc00bd00b050b0b193001042e9e6c0416
251520133013a013b013043013b0130213b8ffc0401a272c480413141302
13190d151d152d15030903151910986c191000183f2b325f5e5d10c4712b
5d713f3f2b323211392f5d712b332b713031592527060623222626353424
25353426262322060723353e02333216161511141e031715210306061514
1616333236363502a30f5799564c743e012101212856484e5f1883608080
4263783c020a14272cfeee0ccbca2e4630446f3e8f04594a3b6b46929f0d
41687838525282322f1b3f8283fea44a3d341f160c3101c8026869394219
42663200>IOEGSA+Cambria AddT42Char 
IOEGSA+Cambria /CharStrings get begin
/B 5 def
/E 8 def
/G 10 def
/I 12 def
/M 16 def
/O 18 def
/T 23 def
/a 131 def
end
IOEGSA+Cambria /Encoding get
dup 66 /B put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 79 /O put
dup 84 /T put
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IOEGSA+Cambria*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 21{/.notdef}rp 
/B /C /D /E /F /G /.notdef /I 
3{/.notdef}rp /M /.notdef /O 2{/.notdef}rp /R /S /T 
/U 11{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
IOEGSA+Cambria nf
IOEGSA+Cambria*1 [15.96 0 0 -15.96 0 0 ]msf
431.245 374.268 mo
(IGBTs and MOSFETs)
[5.17114 9.7514 9.55994 8.52264 6.86273 3.55908 7.78857 8.90564 8.85773 3.591 13.0074 10.4219 
7.9162 8.49072 9.22485 8.52271 0 ]xsh
95.1951 189.348 mo
248.985 189.348 li
248.985 112.454 li
95.1951 112.454 li
cp
.837334 .840193 .847625 rgb
ef
95.1951 189.348 mo
248.985 189.348 li
248.985 112.454 li
95.1951 112.454 li
cp
1 .999999 1 rgb
@
0 .125 .376 rgb
%ADOBeginSubsetFont: NCAAAA+Cambria-BoldItalic Initial
ct_T42Dict begin
-1.109 -0.297 1.375 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /NCAAAA+Cambria-BoldItalic
Type42DictBegin
[<00010000000c000c000c000c4f532f3256bfd812000000cc000000606376
74203cdb38020000012c000002206670676d82152f330000034c00000c4d
676c7966beed603600006db00000425068656164f163648800000f9c0000
00366868656109dc0c3800000fd400000024686d74780fde0e0a00000ff8
000028a06c6f6361cfabbe230000389800001c126d61787010c90ce40000
54ac000000206e616d65e30d48aa000054cc000015d870726570d930d6bd
00006aa40000030c67646972000000000000000000000000000304ae02bc
00050008059a05330000009c059a0533000001f7006601fe020f02040803
0504060a0204e00006ff4000045f00000000000000004d53202000210000
207f0639fe390161079a01c72000019f0000000003e00555000000200003
058a000e000005550010002b055500100000043200100000000000000000
03e0001000000000fff0ff9d0000fff000000000fff00000fe52fff00000
00000000000000000000000000000000067d0010033dfff002e00010ffa0
fff000110000000000000000000000000000000000000000000000000000
0000000000000000000008000000080000000400000000bf000000000000
000000000000000000000000000000000060007100000000000000000000
0000000000000000000000000000006e00a800f500000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000015e012d00e100c800a800830119010e010400f2
0000000001180132012800be0000000000000000007e007500cb00fa00a9
0093007d0068010000f200e0008200dc00b4006e0000000000000000006e
007f004200420000005a000a00000000000000000000012e000000000000
00b600000000000000000000000000000000000000c40000000000dc0000
00000074004d0096007d000000e10000000000ea00e00000000000000000
000000000000000000000000008a009c000000000000000000b600000000
000000a0008600a0000000b00064005a000000000000004a000000000000
000000000000000006be0008027400100381fff000e000ca00b2006e0055
003e0000000000000000013a012a011e00a800940000fed8008c0072fedd
fff000004059655f5e5d5c5b5a59585554524d4c4b4a4948474644434241
403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a29282726252423
2221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a0908070605
04030201002c0118b0184358456ab0194360b00c2344231020b00c4ef04d
2fb000121b21231120332f592d2c0118b0184358b0052bb000134bb01450
58b100403859b0062b1b21231120332f592d2c0118b01843584eb0032510
f221b000124d1b2045b00425b00425234a6164b0285258212310d61bb003
2510f221b0001259592d2cb01a435821211bb00225b0022549b00325b003
254a612064b01050582121211bb00325b0032549b0005058b0005058b8ff
e238211bb0003821591bb0005258b01e38211bb0003821595959592d2c01
18b0184358b0052bb000134bb0145058b90000ffc03859b0062b1b212311
20332f592d2c4e018a10b10c194344b00014b1000ce2b00015b90000fff0
3800b0003cb0282bb0022510b0003c2d2c0118b0002fb00114f2b00113b0
01154db000122d2c0118b0184358b0052bb00013b90000ffe038b0062b1b
21231120332f592d2c0118b018435845646a23456469b01943646060b00c
2344231020b00cf02fb000121b2121208a208a525811331b212159592d2c
014bb0c85158b10b0a432343650a592d2c004bb0c8515800b10a0b432343
0b592d2c00b00c2370b1010c3e01b00c2370b1020c453ab10200080d2d2c
b0122bb0022545b00225456ab0408b60b0022523442121212d2cb0132bb0
022545b00225456ab8ffc08c60b0022523442121212d2cb000b0122b2121
212d2cb000b0132b2121212d2c014bb0c85158b00643b00743650a592d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2cb1000325456854b01c4b505a58b0032545b0032545606820b00425
2344b0042523441bb00325204568208a2344b00325456860b00325234459
2d2cb00325204568208a2344b003254564686560b00425b0016023442d2c
b00943588721c01bb01243588745b0112bb00d2344b00d7ae41b038a4518
6920b00d23448a8a8720b0a05158b0112bb00d2344b00d7ae41b21b00d7a
e4595959182d2c208a4523456860442d2c456a422d2c01182f2d2c0118b0
184358b00425b00425496423456469b0408b6120b080626ab00225b00225
618cb0194360b00c2344218a10b00cf6211b21212121592d2c01b0184358
b0022545b002254564606ab00325456a6120b00425456a208a8b65b00425
23448cb00325234421211b20456a4420456a44592d2c012045b00055b018
435a584568234569b0408b6120b080626a208a236120b003258b65b00425
23448cb00325234421211b2121b0192b592d2c018a8a4564234564616442
2d2cb00425b00425b0192bb0184358b00425b00425b00325b01b2b01b002
2543b04054b0022543b000545a58b003252045b040614459b0022543b000
54b0022543b040545a58b004252045b04060445959212121212d2cb00325
20b0072587052e23208ab00425b00725b0142b1021c4212d2cc02d2c4b52
5845441b2121592d2cb00243583ded181bed592d2c4b505845441b212159
2d2c01184b52588a2fed1b212121592d2c4b53234b515a58b003254568b0
03254568b003256054582121211bb00225456860b0032523442121591b21
2121592d2cb00243583dcd181bcd592d2cb002435c58462346608a8a4623
20468a608a61b8ff8062232010238ab10c0c8a70456020b0005058b00161
b8ffba8b1bb0468c59b0106068013a1b2121212121592d2c2045b0032546
524bb013515b58b0022546206861b00325b003253f2321381b2111592d2c
2045b00325465058b0022546206861b00325b003253f2321381b2111592d
2c004bb0c8515800b00743b006430b592d2c8a10ec2d2cb00c4358211b20
46b0005258b8fff0381bb0103859592d2c20b0005558b8100063b0032545
64b00325456461b0005358b0021bb04061b00359254569535845441b2121
591b21b0022545b00225456164b028515845441b212159592d2c21210c64
23648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59
b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d
2c0c6423648bb84000626023212d2c184b5358b00425b004254964234564
69b0408b6120b080626ab00225b00225618cb00c2344218a10b00cf6211b
218a11231220392f592d2cb00225b002254964b0c05458b8fff838b00838
1b2121592d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b23
10203cb0172b2d2cb00225b8fff038b0282b8a102320d023b0102bb00543
58c01b3c59201011b00012012d2cb0482b2d2c01b0022510d023c901b001
13b0001410b0013cb001162d2c01b00013b001b0032549b0031738b00113
2d2c4b53234b515a5820458a60441b2121592d2c184b5358b00425b00425
4964b00325b00325496468b0408b6120b080626ab00225b00225618cb00c
234421b004251023b00cf61bb00425b0042511122320392f59cc21212d2c
0118b0184358b0052546234564611b21b00425b004254a59b00e23442310
b00eec2310b00eec2d2cb01b435820b0016045b000515820b00160204520
68b0005558b0206044211b212121591b20b0016020452068b0005558b8ff
e06044b01c4b50582045b02060441b21591b21212159591b21592d2cb002
2546206861b00325b003253f2321382d2c462346608a8a462320468a608a
61b8ff8062232010238ab10c0c8a70456020b0005058b00161b8ff808b1b
b0818c59683a2d2cb0402a212d2c2035b001602d2cb0024354584b53234b
515a58381b2121591b21212121592d2c49b00e23442d2cb0024354584b53
234b515a5820458a60441b2121591b21212121592d2c8a10b002435821b0
301ac9181bb0401a18ed592d2c4b53234b515a5820458a60441b2121592d
2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb002435458b0462b1b21212121592d2cb002435458
b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb0024354
58b0492b1b212121592d2c4b52587d1b7a592d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b94000020063b80400885458b202400243604259595959
592d2c451868234b51582320452064b04050587c59688a6059442d2cb000
16b00225b0022501b001233e00b002233eb10102060cb00a236542b00b23
4201b001233f00b002233fb10102060cb006236542b0072342b00116012d
2c20b82000628a6023622d2cb0072558001b0159b0042510b00325b00225
20b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b005254a
b0042547b004254760b0062547b0806361b00225b0005558b00325b00725
496359b0082558001b0159b00425b0062549b009255cb009255a58b0092b
59b0072546b0806361b0032520b0005558631b2159612320b0005558b080
631b21b08059b0592bb006255c586959b00425202010b00048233ab00626
58001b0159b0052658b003252f598a12233221212d2cb00625b00a2587b0
0625b009254ab0005358b00625b00a251bb00925b0072559b00225b00225
070cb005256323b00625636020b94000040063535821b00426b00426b00a
1bb94000040063655158b0042665b0042665b00a1bb00426b00426b000b0
0325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507
595920b0005558b00525b0052587b00725b007250bb0092510b00b25b009
2620b8ffff545821cd1bed59b00525b0052507b00825b00b254923b00625
b0062587b00a2510b00b25c15920b00051b800522378b00161b00225b007
25b0072507b00a25b00d254961b08062b00525b005250bb00a252338b006
25b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b00925
b00c2549b0032554b8ffa723792121212121212121212121212d2c23b000
5458b9400000001bb900004000598ab0005458b9400000001bb900004000
59b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a
8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b004
26080db00426b00426080db05b2b2d2c0020b200400325b0062649618b38
12342d000000000100000006fae131bc38ed5f0f3cf5000b080000000000
b9e6983d00000000d62f8670f71ffd9c0b06086000030009000200000000
000000010000079afe3900000b19f71ffc930b0600740019ff9700000000
0000000000000648054400be0000000001c3000001c30000000000000500
000600000000000000000000000000000000000000000000000000000000
000000000000000000000000068c00020000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000048f0049048a0033
039e004d048f004903fd004c0290ff070000000000000000026b003f0260
ff07000000000260003306ee003f04af003f0452004c0492ffdf04840049
03a6003f038afffc02e9006f04ad00740000000000000000000000000400
ff2700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000026b003f0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000470ff9b04ad000203cc005404df00020414000203f50002
0000000000000000029a0002028aff320000000003c4000205cd000004ae
0000049d005404620002049d0054049e000203a5ffee0454007f04a4008c
000000000000000000000000042800750000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000029a000200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000036400da036000cc02bb00dc036400da02fe00dc01ff00080000
00000000000001e500d501dd00080000000001dd00cc050c00d5037a00d5
033900db0366009b035c00da02c100d502ad00a7023d00ed037900f70000
000000000000000000000300002700000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000022a0121000000000000fea30000fef3000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002a0006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000003d7ff7200000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000033400ed0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000f7fdf9000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000290
ff0700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000042c000b028f003e028f003e00000000
000000000000000000000000000000000000000000000000000000000000
00000000000003c0009d0000000000000000000000000000000000000000
0000000000000000000000000000000000000000048f009b000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000260ff070000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
008100810081008100810142014201420142014201420142014201420142
014201ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff
01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff01ff0291032f03c80478
053705e705e705e7066a07020702074e081308a9091609cb0a5d0ae40b92
0c2a0cb10cb10cb10cb10d560d560d560d560d560d560d560d560d560d56
0d560d560d560d560d560d560d560d560d560d560d560d560d560d560d56
0d560d560d560d560d560d560d560d560d560d560d560d560d560d560d56
0d560d560d560d560d950d950d950d950d950d950d950d950d950d950d95
0d950d950d950d950d950d950d950d950d950d950d950d950d950d950d95
0d950d950d950d950d950d950d950d950d950d950d950d950d950d950d95
0d950d950d950d950d950d950d950d950d950d950d950d950d950d950d95
0d950d950d950d950d950d950d950e040e940ee60f490fe1107110711071
10b710fd10fd114b11e3125912a913231399143514a41501157015701570
157015e115e115e115e115e115e115e115e115e115e115e115e115e115e1
15e115e115e115e115e115e115e115e115e115e115e115e115e115e115e1
15e115e115e115e115e115e115e115e115e115e115e115e115e115e115f7
15f715f715f715f715f715f715f715f715f715f715f715f715f715f715f7
15f715f715f715f715f715f715f715f715f715f715f715f715f715f715f7
15f715f715f715f715f715f715f715f715f715f715f715f715f715f715f7
15f715f715f715f715f715f715f715f715f715f715f715f715f715f71666
16d7172317a3181518861886188618cb19221922195819f31a5e1abd1b37
1ba21bf81c601cba1d201d201d201d201d891d891d891d891d891d891d89
1d891d891d891d891d891d891d891d891d891d891d891d891d891d891d89
1d891d891d891d891d891d891d891d891d891d891d891d891d891d891d89
1d891d891d891d891d891d891d891d891d891d891d891d891d891d891d89
1d891d891d891d891d891d891dab1dab1dcd1dea1dea1dea1dea1dea1dea
1dea1dea1dea1dea1dea1dea1dea1dea1e131e131e131e131e131e131e13
1e131e131e131e131e131e131e131e131e131e131e131e131e131e131e13
1e131e131e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e301e301e301e301e301e301e301e301e301e301e301e301e301e30
1e301e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b1e5b
1e5b1e5b1e5b1e5b1e5b1e5b1e771e771e771e771e771e771e771e771e77
1e771e771e771e771e771e771e771e771e771e771e771e771e771e771e77
1e771e771e771e771e771e771e771e771e771e771e771e771e771e771e77
1e771e771e771e771e771ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef91ef9
1ef91ef91ef91ef91ef91ef91ef91ef91ef91f6c1fbc200e200e200e200e
200e200e200e200e200e200e200e20782078207820782078207820782078
20782078207820f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f520f520f520f520f520f520f520f520f520f520f520f520f520f520f5
20f521282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
212821282128212821282128212821282128212821282128212821282128
21282128212821282128212821280000000100000e080044000400210002
00020010002f0066000002420c4d000200010000002f023a000000000000
000d03880000000000000000000e006c03880000000300000000006403f4
0000000300000001000e0458000000030000000200160b88000000030000
0003003c0b62000000030000000400260b78000000030000000500180b9e
000000030000000600240bb6000000030000000700760bda000000030000
0008002a0402000000030000000900460c50000000030000000a070a0458
000000030000000b00560c96000000030000000c00280cec000000030000
000d03880000000000030000000e006c0388000100000000000000320d14
000100000000000100070d460001000000000002000b10de000100000000
0003001e10cb0001000000000004001310d60001000000000005000c10e9
0001000000000006001210f50001000000000007003b1107000100000000
000800150d1b000100000000000900231142000100000000000a03850d46
000100000000000b002b1165000100000000000c00141190000100000000
000d01c411a4000100000000000e003613680003000104090000006403f4
0003000104090001000e0458000300010409000200160b88000300010409
0003003c0b62000300010409000400260b78000300010409000500180b9e
000300010409000600240bb6000300010409000700760bda000300010409
0008002a0402000300010409000900460c50000300010409000a070a0458
000300010409000b00560c96000300010409000c00280cec000300010409
000d03880000000300010409000e006c0388004d006900630072006f0073
006f0066007400200073007500700070006c00690065006400200066006f
006e0074002e00200059006f00750020006d006100790020007500730065
0020007400680069007300200066006f006e007400200074006f00200063
00720065006100740065002c00200064006900730070006c00610079002c
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
006400200062007900200074006800650020006c006900630065006e0073
00650020007400650072006d00730020006f00720020007400650072006d
00730020006f00660020007500730065002c0020006f0066002000740068
00650020004d006900630072006f0073006f00660074002000700072006f
0064007500630074002c00200073006500720076006900630065002c0020
006f007200200063006f006e00740065006e007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
00770061007300200069006e0063006c0075006400650064002e00200059
006f00750020006d006100790020006f006e006c00790020002800690029
00200065006d0062006500640020007400680069007300200066006f006e
007400200069006e00200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
0068006500200065006d00620065006400640069006e0067002000720065
0073007400720069006300740069006f006e007300200069006e0063006c
007500640065006400200069006e0020007400680069007300200066006f
006e0074003b00200061006e006400200028006900690029002000740065
006d0070006f0072006100720069006c007900200064006f0077006e006c
006f006100640020007400680069007300200066006f006e007400200074
006f002000610020007000720069006e0074006500720020006f00720020
006f00740068006500720020006f00750074007000750074002000640065
007600690063006500200074006f002000680065006c0070002000700072
0069006e007400200063006f006e00740065006e0074002e00200041006e
00790020006f007400680065007200200075007300650020006900730020
00700072006f0068006900620069007400650064002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e006100730070007800a9002000320030003100370020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020007200690067006800740073
002000720065007300650072007600650064002e00430061006d00620072
0069006100200068006100730020006200650065006e0020006400650073
00690067006e0065006400200066006f00720020006f006e002d00730063
007200650065006e002000720065006100640069006e006700200061006e
006400200074006f0020006c006f006f006b00200067006f006f00640020
007700680065006e0020007000720069006e007400650064002000610074
00200073006d0061006c006c002000730069007a00650073002e00200049
00740020006800610073002000760065007200790020006500760065006e
002000730070006100630069006e006700200061006e0064002000700072
006f0070006f007200740069006f006e0073002e00200044006900610067
006f006e0061006c00200061006e00640020007600650072007400690063
0061006c00200068006100690072006c0069006e0065007300200061006e
006400200073006500720069006600730020006100720065002000720065
006c00610074006900760065006c00790020007300740072006f006e0067
002c0020007700680069006c006500200068006f00720069007a006f006e
00740061006c002000730065007200690066007300200061007200650020
0073006d0061006c006c00200061006e006400200069006e00740065006e
006400200074006f00200065006d00700068006100730069007a00650020
007300740072006f006b006500200065006e00640069006e006700730020
0072006100740068006500720020007400680061006e0020007300740061
006e00640020006f007500740020007400680065006d00730065006c0076
00650073002e002000540068006900730020007000720069006e00630069
0070006c00650020006900730020006d006f007300740020006e006f0074
00690063006500610062006c006500200069006e00200074006800650020
006900740061006c00690063007300200077006800650072006500200074
006800650020006c006f0077006500720063006100730065002000630068
006100720061006300740065007200730020006100720065002000730075
0062006400750065006400200069006e0020007300740079006c00650020
0074006f0020006200650020006100740020007400680065006900720020
006200650073007400200061007300200065006c0065006d0065006e0074
00730020006f006600200077006f00720064002d0069006d006100670065
0073002e0020005700680065006e002000430061006d0062007200690061
0020006900730020007500730065006400200066006f0072002000630061
007000740069006f006e0073002000610074002000730069007a00650073
0020006f00760065007200200032003000200070006f0069006e0074002c
0020007400680065002000200069006e007400650072002d006300680061
007200610063007400650072002000730070006100630069006e00670020
00730068006f0075006c006400200062006500200073006c006900670068
0074006c00790020007200650064007500630065006400200066006f0072
0020006200650073007400200072006500730075006c00740073002e0020
005400680065002000640065007300690067006e002000690073006e0027
00740020006a00750073007400200069006e00740065006e006400650064
00200066006f007200200062007500730069006e00650073007300200064
006f00630075006d0065006e00740073003a002000540068006500200072
006500670075006c00610072002000770065006900670068007400200068
006100730020006200650065006e00200065007800740065006e00640065
006400200077006900740068002000610020006c00610072006700650020
0073006500740020006f00660020006d00610074006800200061006e0064
00200073006300690065006e00630065002000730079006d0062006f006c
0073002e002000540068006500200047007200650065006b00200061006e
006400200043007900720069006c006c0069006300200068006100730020
006200650065006e002000640065007300690067006e0065006400200075
006e00640065007200200063006c006f0073006500200073007500700065
00720076006900730069006f006e0020006f006600200061006e00200069
006e007400650072006e006100740069006f006e0061006c002000740065
0061006d0020006f006600200065007800700065007200740073002c0020
00770068006f002000610069006d0065006400200074006f002000730065
00740020006100200068006900730074006f0072006900630061006c0020
006e006500770020007300740061006e006400610072006400200069006e
0020006d0075006c00740069002d00730063007200690070007400200074
007900700065002000640065007300690067006e002e004d006900630072
006f0073006f00660074003a002000430061006d00620072006900610020
0042006f006c00640020004900740061006c006900630056006500720073
0069006f006e00200036002e0039003800430061006d0062007200690061
002d0042006f006c0064004900740061006c0069006300430061006d0062
00720069006100200069007300200061002000740072006100640065006d
00610072006b0020006f006600200074006800650020004d006900630072
006f0073006f00660074002000670072006f007500700020006f00660020
0063006f006d00700061006e006900650073002e004d006f006e006f0074
00790070006500200049006d006100670069006e006700200061006e0064
0020005400690072006f002000540079007000650077006f0072006b0073
0068007400740070003a002f002f007700770077002e006d006900630072
006f0073006f00660074002e0063006f006d002f007400790070006f0067
00720061007000680079002f006300740066006f006e0074007300680074
00740070003a002f002f007700770077002e0066006f006e00740073002e
0063006f006da92032303137204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c207269676874732072657365727665642e43616d62
72696120686173206265656e2064657369676e656420666f72206f6e2d73
637265656e2072656164696e6720616e6420746f206c6f6f6b20676f6f64
207768656e207072696e74656420617420736d616c6c2073697a65732e20
4974206861732076657279206576656e2073706163696e6720616e642070
726f706f7274696f6e732e20446961676f6e616c20616e64207665727469
63616c20686169726c696e657320616e6420736572696673206172652072
656c61746976656c79207374726f6e672c207768696c6520686f72697a6f
6e74616c207365726966732061726520736d616c6c20616e6420696e7465
6e6420746f20656d70686173697a65207374726f6b6520656e64696e6773
20726174686572207468616e207374616e64206f7574207468656d73656c
7665732e2054686973207072696e6369706c65206973206d6f7374206e6f
7469636561626c6520696e20746865206974616c69637320776865726520
746865206c6f776572636173652063686172616374657273206172652073
75626475656420696e207374796c6520746f206265206174207468656972
206265737420617320656c656d656e7473206f6620776f72642d696d6167
65732e205768656e2043616d62726961206973207573656420666f722063
617074696f6e732061742073697a6573206f76657220323020706f696e74
2c207468652020696e7465722d6368617261637465722073706163696e67
2073686f756c6420626520736c696768746c79207265647563656420666f
72206265737420726573756c74732e205468652064657369676e2069736e
2774206a75737420696e74656e64656420666f7220627573696e65737320
646f63756d656e74733a2054686520726567756c61722077656967687420
686173206265656e20657874656e64656420776974682061206c61726765
20736574206f66206d61746820616e6420736369656e63652073796d626f
6c732e2054686520477265656b20616e6420437972696c6c696320686173
206265656e2064657369676e656420756e64657220636c6f736520737570
6572766973696f6e206f6620616e20696e7465726e6174696f6e616c2074
65616d206f6620657870657274732c2077686f2061696d656420746f2073
6574206120686973746f726963616c206e6577207374616e646172642069
6e206d756c74692d73637269707420747970652064657369676e2e4d6963
726f736f66743a2043616d6272696120426f6c64204974616c6963566572
73696f6e20362e393843616d627269612d426f6c644974616c696343616d
6272696120697320612074726164656d61726b206f6620746865204d6963
726f736f66742067726f7570206f6620636f6d70616e6965732e4d6f6e6f
7479706520496d6167696e6720616e64205469726f2054797065776f726b
73687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f
6772617068792f6374666f6e7473687474703a2f2f7777772e666f6e7473
2e636f6d4d6963726f736f667420737570706c69656420666f6e742e2059
6f75206d617920757365207468697320666f6e7420746f20637265617465
2c20646973706c61792c20616e64207072696e7420636f6e74656e742061
73207065726d697474656420627920746865206c6963656e736520746572
6d73206f72207465726d73206f66207573652c206f6620746865204d6963
726f736f66742070726f647563742c20736572766963652c206f7220636f
6e74656e7420696e207768696368207468697320666f6e74207761732069
6e636c756465642e20596f75206d6179206f6e6c792028692920656d6265
64207468697320666f6e7420696e20636f6e74656e74206173207065726d
69747465642062792074686520656d62656464696e672072657374726963
74696f6e7320696e636c7564656420696e207468697320666f6e743b2061
6e6420286969292074656d706f726172696c7920646f776e6c6f61642074
68697320666f6e7420746f2061207072696e746572206f72206f74686572
206f75747075742064657669636520746f2068656c70207072696e742063
6f6e74656e742e20416e79206f74686572207573652069732070726f6869
62697465642e687474703a2f2f7777772e6d6963726f736f66742e636f6d
2f7479706f6772617068792f666f6e74732f64656661756c742e61737078
4081dfe016171cd4d516171c7b7c161b7b7c19d1d216171c767716171c6d
7016171c6c6f16171c6b6e161b6b6e7f721a747514151c676a14151c6669
14151c6568141b656885711a1973167a4319217943192107c717c70270be
80be0287b001e7e8012b409a0130994099b099c099049192022b40940109
631863c7630320630d0f39b8fff0b3471f2539b8010c405f98012b379e01
9695022b1897292a39079717970210953f4039d99501a49501817f012b7d
7e052b7e84221f8885012b8785012b8485052b8385052b0885093700431b
37151836151535151234150f33150c3215093115063015032f15002e15b8
010a4033433e2126270e28270f0f2a0128f8ff2bf8f90ff6f70ef4f50e3f
f8f0f8023ff4012a2b0e2c2b0f22230e24230f1e1f0e201f0fb8ffc04051
05090a390f10110c090a0b0c0607080c0304050c0001020c0603641f0b0f
4b0f020b003b004403660974038709ab00a609db0f090b000b030b0f3b00
3b0959035b097603740f9b009b09990fb909da000eb9010d010e40120f1b
011d0d18071a0d1510170d1204140d1f410e010d00010000010d0010010d
002f010d003f010d009f010d00bf010d4026062c3c2a3c283c263c243c22
3c203c1e3c1b3c183c153c123c0f3c093c063c033c003c50335401b0124b
004b5442b013014b004b5342b0332b4bb8032052b0322b4bb009505b58b1
01018e59b0332bb00288b8010054b00488b8020054b012435a5b58b80119
b101018e851bb900010100b04b60858d592b2b1db0644b5358b0801d59b0
324b5358b0901d59004bb03251b01b23422b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b73742b2b2b2b2b7374752b2b2b2b2b2b2b2b2b2b2b2b2b7373b0
f445b0f8456961b0f82344b0f64569b0f84560b0f623442b2b2b2b73b02a
45b02c4561b0284560b02623442b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b
2b2b2b2b2b0073742b742b2b742b2b2b74732b73732b7373742b2bb018b0
3f4b53422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb109322b4bb0505242b0
02435c4bb064524bb01b505b60b01a23424bb0c8524bb036505bb00c2342
00>
[16249 729 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 258 5 <000300060000052405550022002d003a00d0b10102435558403f0a067e27
273c2e0e7e4036363c1b3a2d2e2c2e1c2c2e031b0b0a3a2d2d3a033a9240
2d2d2231163103319216401617a64416222a032a9222402221a644220300
183f2b001a1810ed2b00182f2b001a1810ed2b11120039182f1aed2b1112
0039393001182f17331087c0c0111201392f1aed1112392fed3231301b40
270b0a3a2d2d3a033a92402d2d2231163103319216401617a64416222a03
2a9222402221a644220300183f2b001a1810ed2b00182f2b001a1810ed2b
11120039182f1aed2b111200393930590132161716161514060607071616
15140e042321373e02371336353426273701323636353426232207030316
1633323e02353426232303578dae332e31458b73025e672648757bab76fd
e10e2a2d2010b60d272c0e01b45883466c724630698d155b10607b4d2b6a
6b8a055526242065465f8c692d0b26885944795d512b17420c2a4d490339
3b3a2a270642fdaa4f8c5b565505fe24fd790201355b84455d5f>NCAAAA+Cambria-BoldItalic AddT42Char 
1 1022 131 <00020049fff0045a03f0001c002e0094b10102435558402c0002030c0d20
060b0b30278440150c0d2c032a0a09a7440a112a032a964011160100231b
1b23032398401b1000183f1aed2b1112003933183f1aed2b00182f2b1100
17333001182f1aed12392f173331301b401e0c0d2c032a0a09a7440a112a
032a964011160100231b1b23032398401b1000183f1aed2b111200393318
3f1aed2b00182f2b11001733305901371703060615141617072137270e02
2322262635343e0333320336363534262322060215141633323636370390
5a709a0c0b2c380bfe80360d4475714a466a3e316092b96d952e07093239
5d90582b2d4289542103a84810fd473540162d280542cd04586128428f6e
69d6b98445fe7e204f254244bbfec47d494881ae9700>NCAAAA+Cambria-BoldItalic AddT42Char 
1 1314 132 <00020033fff00449059800200035009bb10102435558402e0984402e2e37
001318202305151326141010260326984010160001330331053103319640
05101f011e1da7441e0000183f2b00183f3f1aed2b11001733183f1aed2b
11003312393001182f173312392f1aed31301b4021132614101026032698
401016000133033105310331964005101f011e1da7441e0000183f2b0018
3f3f1aed2b11001733183f1aed2b1100331239305901173e023332161615
140e04232226270727133635342e0227372533030615141633323636373e
02353426232206060701f30d3f6a6d44456b3f2a4c6a8398574278405d6d
fd1509121d2c10012675f210313a253f3d1f273b222b2d42895222033404
49532441906e58d3a37a502920284810046a5e3116191009064110fbda4a
47494018373542a8b94d4a4781aa9b00>NCAAAA+Cambria-BoldItalic AddT42Char 
1 1630 133 <0001004dfff003cb03f0002400c1b1010243555840391715010126208440
080140181d480120af0001000010002000e0000409030022042203229640
041615120f17011103171c121c031c9840121000183f1aed2b001810c65f
5e5d12393f1aed2b001810d65f5e5d5d1a19cd2b3001182f1aed12392fc6
3231301b40300140181d480120af0001000010002000e000040903002204
2203229640041615120f17011103171c121c031c9840121000183f1aed2b
001810c65f5e5d12393f1aed2b001810d65f5e5d5d1a19cd2b3059011706
0623222626353437363736373e0233321617072336353426232206021514
33323602f75169d27e679249150f18202b338fb367439c3c38b4022c2b4a
865a89457b010957695958a36e57563f3d513c4666351513f415164841aa
fed272bc3e00>NCAAAA+Cambria-BoldItalic AddT42Char 
1 1936 134 <00020049fff004bc05980026003800b6b1010243555840380b0f1516262a
0614143a3184401e2624242d032d984024101312031312a7441315163603
341a34033496401a160a010908030908a744090000183f2b2b00183f3f1a
ed2b11001733182f2b2b00183f1aed2b1100333001182f1aed12392f1733
31301b402a2624242d032d984024101312031312a7441315163603341a34
033496401a160a010908030908a744090000183f2b2b00183f3f1aed2b11
001733182f2b2b00183f1aed2b110033305901363635342e022737253303
060615141617072137270e022322262635343e0333321703363635342623
2206021514163332363637035f061009121e2c10012b71fc0b0c2c380bfe
80360d4475714a466a3e315f92b96d595344060a32395d90582b2d428954
21046a195e1816191009064110fb8f3143172d280542cd04586128428f6e
69d6b984451ffe9d1e4f264344bbfec47d494881ae97>NCAAAA+Cambria-BoldItalic AddT42Char 
1 2288 135 <0002004cfff003e903f00021002a00fcb101024355584039221719001286
25252c198440071722031798405f226f22023f224f228f220322220f1e00
40191d4800205f216f210200211021202103090321b8ffc0401514174821
1e031e031e964003160f28032898400f1000183f1aed2b00183f1aed2b00
1810d62b5f5e5d711a19cd2b111239182f5d711aed2b3001182f1aed1239
2ffdc411333331301b402c1722031798405f226f22023f224f228f220322
220f1e0040191d4800205f216f210200211021202103090321b8ffc04015
141748211e031e031e964003160f28032898400f1000183f1aed2b00183f
1aed2b001810d62b5f5e5d711a19cd2b111239182f5d711aed2b30592506
062322262635343736373e023332161514060604070615141e0233323637
253636353426232206038e65e98875a4530e1327319ed57f969c3d8efefd
b70d0e243c2f588e60fe42b8c32f2a5d95d0726e52a17034516e566a9852
6d704c745e3a043b3f2543341f475bfc0583783335b8>NCAAAA+Cambria-BoldItalic AddT42Char 
1 3022 139 <0002003f0000027e056f0003001600b0b10102435558403901030040020d
040d16030c0302030363400f024f0202ff02010f02bf02df02ff02040900
021002021003020b0aa7440b15aa141413a744140f00183f2b001810e52f
2b00182f5f5e5d5e5d71721aed2b3001182f173310d41acd323331301b40
2e0302030363400f024f0202ff02010f02bf02df02ff0204090002100202
1003020b0aa7440b15aa141413a744140f00183f2b001810e52f2b00182f
5f5e5d5e5d71721aed2b3059010721371306061514161707211336363534
2627372533027e34fefd37190b062d370bfe609c0d0a253b0f012572056f
f5f5fb9c3230102b26064202ba3c4317272106420b00>NCAAAA+Cambria-BoldItalic AddT42Char 
1 3588 142 <000100330000028d05980013004eb101024355584016010b02030a080815
0a0908a7440900011312a744130000183f2b00183f2f2b3001182f12392f
11173331301b400d0908a7440900011312a744130000183f2b00183f2f2b
30590133010606151416170721133635342e022737021c71fefe0a072d37
0bfe60fd1609121e2c100598fb732e32122b260642046a622d1619100906
4100>NCAAAA+Cambria-BoldItalic AddT42Char 
1 4134 144 <0001003f0000044303f0002b00a4b1010243555840340522280301012d0f
1b1a0c0e190e0e1019030f19aa171716031716a744170f1b0b081f080308
96401f10002b03002ba74400150f00182f3f2b2b00183f1aed2b11003333
183f2b2b001810e530012f17331087c0c0c0111201392f1733311b402119
aa171716031716a744170f1b0b081f08030896401f10002b03002ba74400
150f00182f3f2b2b00183f1aed2b11003333183f2b2b001810e530592121
13363635342623220e020703211336363534262737253307173e02333216
151407030606151416170424fe617d1b0c2624204c5e38116efee19d0511
2f320f011369390c45767547677614520a072d3702207458192d2c306672
55fdff02c218591e2a1f04420bd80455612b7365415afe8e2e32122d2406
>NCAAAA+Cambria-BoldItalic AddT42Char 
1 4434 145 <0002004cfff0040d03f0001800290059b101024355584019148323232b19
8340041026032698401010001c031c9840001600183f1aed2b00183f1aed
2b3001182f1aed12392fed311b40101026032698401010001c031c984000
1600183f1aed2b00183f1aed2b305905222626353437363736373e023736
33321616151402060603141633323e043534262322060201c06ea75f0608
14172326647545525a7ca851589bd4ed3d42254341342f1a3d40547b5910
4fa1742c364447524048694512155ba26b84fef6b45601235e5d1f4b73a9
a246645ea3feab00>NCAAAA+Cambria-BoldItalic AddT42Char 
1 5306 148 <0001003f000003eb03f0001d00acb10102435558403718170c160c1d010c
0e16030d01011f0d0c17180a03040204120422040311041b040300011001
021203010495401b1015101413a744140f00183f2b00183f3f1afdc65f5e
5d2b005f5e5d111733182f30012f12392f11173311331087c0c031301b40
270c17180a03040204120422040311041b04030001100102120301049540
1b1015101413a744140f00183f2b00183f3f1afdc65f5e5d2b005f5e5d11
1733182f30590123342623220e0407032113363534262737253307173636
33321703b0b31d2310232d3f2a1c0c6efee19d162f320f0113714b0c54ba
6c424a02d043340d214a464d3bfdff02c2632c2a1f04420be804777a1300
>NCAAAA+Cambria-BoldItalic AddT42Char 
1 5576 149 <0001fffcfff0038c03f0002b00dab101024355584046002a0e1614238407
072d1c85400e0b2020192a27042704035000010000100020007000800005
0004984027161419115f16010f161f162f168f1604090311190316199840
111000183f1afdc62b005f5e5d71111239183f1afdc65d712b1112003912
3911333001182f1aed12392ffdc63210c43231301b40380b2020192a2704
27040350000100001000200070008000050004984027161419115f16010f
161f162f168f1604090311190316199840111000183f1afdc62b005f5e5d
71111239183f1afdc65d712b11120039123911333059131e023332363534
262627262635343633321617072326262322061514161617161615140606
2322262737b3053148304f561c4048645bdcc64db149347f094d4843511f
44436a5c6dbd796bb8513801184857214d462a3a372c3c8150939e1915ef
5d58453b253838283f865a6690461a16f800>NCAAAA+Cambria-BoldItalic AddT42Char 
1 5924 150 <0001006ffff0032604da002400c0b10102435558403c0d0b160000260b18
15191419131419030b00401a1d4800242000241024202403090304210324
219604160f13010c03131540180ea7440c189740150f00183f1aed322b00
1a1810cd5f5e5d3ffdc62b005f5e5d1a1910cd2b3001182f17331087c0c0
111201392fc610c631301b402b00401a1d48002420002410242024030903
04210324219604160f13010c03131540180ea7440c189740150f00183f1a
ed322b001a1810cd5f5e5d3ffdc62b005f5e5d1a1910cd2b3059250e0223
222626353436371323373e03373307330723030e031514163332363702dc
47707a50516b300e1667870e3e46312c1bf03af31bf56f070c080322212d
5f37b64d52273b633e2f556101b2420421407060fa7dfe371e3a35230e2f
2b404300>NCAAAA+Cambria-BoldItalic AddT42Char 
1 6498 155 <0001ff27fe4b042403e0002900c0b10102435558403a2908211f05000708
000e110b0b2b001f1c241c24030f21010c03210d241d242d240311042495
401c1b1408290e050f11020b04060605a744060f00183f2b110017331133
182f33333f1afd5f5e5dc65f5e5d2b111200393001182f12392f33c61133
3310c6c432123931301b402b1f1c241c24030f21010c03210d241d242d24
0311042495401c1b1408290e050f11020b04060605a744060f00183f2b11
0017331133182f33333f1afd5f5e5dc65f5e5d2b11120039305921032e02
273721133612353426273721170602000706070607060623222627373316
1633323e0237011a5a091727290f016045978f242d0e011a232aacfeff8f
78513d372c62401e4f1f316a01201f2a4346603e02e64949220442fd15d8
012260262702424271feccfe88ba9c4f3c201b1a0d0ae12a281c3a6b4e00
>NCAAAA+Cambria-BoldItalic AddT42Char 

1 0 3 <> NCAAAA+Cambria-BoldItalic AddT42Char 
1 0 0 <000400be0000048605540028002c003000340061401314140e2206060e00
2c2b2b300e18183034402fb80200401b300033103302331d0b2800002a2b
131432142b0b03332d2d3630332fcd12392f121739cd2fcd2fcd392fcd2f
cd002f5dcd1add1acd12392fcd11392fddce1139113312392f3130013534
3e02373e0335342623220e02072335363633321e0215140e02070e031515
171523350111211101112111023706162a2417261b0f413e203024190960
3c894346633e1c0f243c2c20261507129001fcfd060361fc3801e7161625
2a3527192f3339234b521424321e821e2e1d334629263e3d462d212c2728
1c066ea1a1fee4049afb6604f7faac055400>NCAAAA+Cambria-BoldItalic AddT42Char 
NCAAAA+Cambria-BoldItalic /CharStrings get begin
/B 5 def
/a 131 def
/b 132 def
/c 133 def
/d 134 def
/e 135 def
/i 139 def
/l 142 def
/n 144 def
/o 145 def
/r 148 def
/s 149 def
/t 150 def
/y 155 def
/space 3 def
end
NCAAAA+Cambria-BoldItalic /Encoding get
dup 66 /B put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 127 /space put
pop
end
%ADOEndSubsetFont
/IOEGSB+Cambria-BoldItalic /NCAAAA+Cambria-BoldItalic findfont ct_VMDictPut
/IOEGSB+Cambria-BoldItalic*1 
[66{/.notdef}rp /B 30{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp 
/r /s /t 4{/.notdef}rp /y 5{/.notdef}rp /space 128{/.notdef}rp]
IOEGSB+Cambria-BoldItalic nf
IOEGSB+Cambria-BoldItalic*1 [15.96 0 0 -15.96 0 0 ]msf
139.715 147.398 mo
(Based)
[9.97501 9.09732 7.05432 7.96393 0 ]xsh
186.515 147.398 mo
(on\177)
[8.63989 9.35831 0 ]xsh
120.875 164.318 mo
(controllability)
[7.08618 8.61829 9.3367 5.80942 7.19788 8.61829 4.74005 4.64432 9.09732 9.04935 4.81995 4.62836 
4.81995 5.96902 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/IOEGRZ+Cambria-Bold*1 uf
/IOEGRZ+Cambria-Bold uf
/HCAAAA+Cambria-Bold uf
/IOEGSA+Cambria*1 uf
/IOEGSA+Cambria uf
/KCAAAA+Cambria uf
/IOEGSB+Cambria-BoldItalic*1 uf
/IOEGSB+Cambria-BoldItalic uf
/NCAAAA+Cambria-BoldItalic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
